# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines for those models you wish to give write DB access
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class AccountAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=64)
    reconcile = models.NullBooleanField()
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    user_type = models.ForeignKey('AccountAccountType', db_column='user_type')
    active = models.NullBooleanField()
    name = models.CharField(max_length=256)
    level = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    shortcut = models.CharField(max_length=12, blank=True)
    note = models.TextField(blank=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    currency_mode = models.CharField(max_length=-1)
    type = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_account'

class AccountAccountConsolRel(models.Model):
    child = models.ForeignKey(AccountAccount)
    parent = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_account_consol_rel'

class AccountAccountFinancialReport(models.Model):
    account = models.ForeignKey(AccountAccount)
    report_line = models.ForeignKey('AccountFinancialReport')
    class Meta:
        managed = False
        db_table = 'account_account_financial_report'

class AccountAccountFinancialReportType(models.Model):
    report = models.ForeignKey('AccountFinancialReport')
    account_type = models.ForeignKey('AccountAccountType')
    class Meta:
        managed = False
        db_table = 'account_account_financial_report_type'

class AccountAccountTaxDefaultRel(models.Model):
    account = models.ForeignKey(AccountAccount)
    tax = models.ForeignKey('AccountTax')
    class Meta:
        managed = False
        db_table = 'account_account_tax_default_rel'

class AccountAccountTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    code = models.CharField(max_length=64)
    reconcile = models.NullBooleanField()
    user_type = models.ForeignKey('AccountAccountType', db_column='user_type')
    shortcut = models.CharField(max_length=12, blank=True)
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    nocreate = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    chart_template = models.ForeignKey('AccountChartTemplate', blank=True, null=True)
    name = models.CharField(max_length=256)
    class Meta:
        managed = False
        db_table = 'account_account_template'

class AccountAccountTemplateTaxRel(models.Model):
    account = models.ForeignKey(AccountAccountTemplate)
    tax = models.ForeignKey('AccountTaxTemplate')
    class Meta:
        managed = False
        db_table = 'account_account_template_tax_rel'

class AccountAccountType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    close_method = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    code = models.CharField(max_length=32)
    name = models.CharField(max_length=64)
    report_type = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_account_type'

class AccountAccountTypeRel(models.Model):
    journal = models.ForeignKey('AccountJournal')
    account = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_account_type_rel'

class AccountAddtmplWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    cparent = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_addtmpl_wizard'

class AccountAgedTrialBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_length = models.IntegerField()
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    direction_selection = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_aged_trial_balance'

class AccountAgedTrialBalanceJournalRel(models.Model):
    account = models.ForeignKey(AccountAgedTrialBalance)
    journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_aged_trial_balance_journal_rel'

class AccountAnalyticAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=-1, blank=True)
    description = models.TextField(blank=True)
    quantity_max = models.FloatField(blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=128)
    parent = models.ForeignKey('self', blank=True, null=True)
    date_start = models.DateField(blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    state = models.CharField(max_length=-1)
    manager = models.ForeignKey('ResUsers', blank=True, null=True)
    type = models.CharField(max_length=-1)
    template = models.ForeignKey('self', blank=True, null=True)
    use_tasks = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_analytic_account'

class AccountAnalyticBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date1 = models.DateField()
    date2 = models.DateField()
    empty_acc = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_analytic_balance'

class AccountAnalyticChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    from_date = models.DateField(blank=True, null=True)
    to_date = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_analytic_chart'

class AccountAnalyticCostLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_analytic_cost_ledger'

class AccountAnalyticCostLedgerJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_analytic_cost_ledger_journal_report'

class AccountAnalyticInvertedBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_analytic_inverted_balance'

class AccountAnalyticJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=8, blank=True)
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    type = models.CharField(max_length=32)
    company = models.ForeignKey('ResCompany')
    class Meta:
        managed = False
        db_table = 'account_analytic_journal'

class AccountAnalyticJournalName(models.Model):
    journal_line = models.ForeignKey('AccountAnalyticJournalReport')
    journal_print = models.ForeignKey(AccountAnalyticJournal)
    class Meta:
        managed = False
        db_table = 'account_analytic_journal_name'

class AccountAnalyticJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_analytic_journal_report'

class AccountAnalyticLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=256)
    unit_amount = models.FloatField(blank=True, null=True)
    date = models.DateField()
    company_id = models.IntegerField(blank=True, null=True)
    account = models.ForeignKey(AccountAnalyticAccount)
    code = models.CharField(max_length=8, blank=True)
    general_account = models.ForeignKey(AccountAccount)
    currency_id = models.IntegerField(blank=True, null=True)
    move = models.ForeignKey('AccountMoveLine', blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    product_uom = models.ForeignKey('ProductUom', blank=True, null=True)
    journal = models.ForeignKey(AccountAnalyticJournal)
    amount_currency = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    ref = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'account_analytic_line'

class AccountAssetAsset(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    method_number = models.IntegerField(blank=True, null=True)
    code = models.CharField(max_length=32, blank=True)
    method_end = models.DateField(blank=True, null=True)
    prorata = models.NullBooleanField()
    salvage_value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency = models.ForeignKey('ResCurrency')
    method_time = models.CharField(max_length=-1)
    active = models.NullBooleanField()
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    name = models.CharField(max_length=64)
    method_progress_factor = models.FloatField(blank=True, null=True)
    purchase_value = models.FloatField()
    company = models.ForeignKey('ResCompany')
    note = models.TextField(blank=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    state = models.CharField(max_length=-1)
    method_period = models.IntegerField()
    purchase_date = models.DateField()
    category = models.ForeignKey('AccountAssetCategory')
    method = models.CharField(max_length=-1)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_asset_asset'

class AccountAssetCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    method_number = models.IntegerField(blank=True, null=True)
    method_end = models.DateField(blank=True, null=True)
    account_asset = models.ForeignKey(AccountAccount)
    account_depreciation = models.ForeignKey(AccountAccount)
    company = models.ForeignKey('ResCompany')
    method_time = models.CharField(max_length=-1)
    method_progress_factor = models.FloatField(blank=True, null=True)
    account_expense_depreciation = models.ForeignKey(AccountAccount)
    name = models.CharField(max_length=64)
    journal = models.ForeignKey('AccountJournal')
    note = models.TextField(blank=True)
    prorata = models.NullBooleanField()
    open_asset = models.NullBooleanField()
    method_period = models.IntegerField()
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    method = models.CharField(max_length=-1)
    accounting_type = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'account_asset_category'

class AccountAssetDepreciacion(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    accounting_type = models.CharField(max_length=-1)
    asset_type = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany')
    period = models.ForeignKey('AccountPeriod', db_column='period')
    class Meta:
        managed = False
        db_table = 'account_asset_depreciacion'

class AccountAssetDepreciationLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    asset = models.ForeignKey(AccountAssetAsset)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField()
    move_check = models.NullBooleanField()
    depreciation_date = models.DateField(blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    remaining_value = models.DecimalField(max_digits=65535, decimal_places=65535)
    move = models.ForeignKey('AccountMove', blank=True, null=True)
    depreciated_value = models.FloatField()
    class Meta:
        managed = False
        db_table = 'account_asset_depreciation_line'

class AccountAssetHistory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    asset = models.ForeignKey(AccountAssetAsset)
    method_number = models.IntegerField(blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(max_length=64, blank=True)
    method_end = models.DateField(blank=True, null=True)
    note = models.TextField(blank=True)
    method_time = models.CharField(max_length=-1)
    method_period = models.IntegerField(blank=True, null=True)
    date = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_asset_history'

class AccountAutomaticReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    power = models.IntegerField()
    max_amount = models.FloatField(blank=True, null=True)
    reconciled = models.IntegerField(blank=True, null=True)
    unreconciled = models.IntegerField(blank=True, null=True)
    allow_write_off = models.NullBooleanField()
    writeoff_acc = models.ForeignKey(AccountAccount, blank=True, null=True)
    journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    period = models.ForeignKey('AccountPeriod', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_automatic_reconcile'

class AccountBalanceReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    display_account = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_balance_report'

class AccountBalanceReportJournalRel(models.Model):
    account = models.ForeignKey(AccountBalanceReport)
    journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_balance_report_journal_rel'

class AccountBankAccountsWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    acc_name = models.CharField(max_length=64)
    account_type = models.CharField(max_length=32, blank=True)
    bank_account = models.ForeignKey('WizardMultiChartsAccounts')
    class Meta:
        managed = False
        db_table = 'account_bank_accounts_wizard'

class AccountBankStatement(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    balance_start = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    journal = models.ForeignKey('AccountJournal')
    period = models.ForeignKey('AccountPeriod')
    total_entry_encoding = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date = models.DateField()
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=64)
    closing_date = models.DateTimeField(blank=True, null=True)
    balance_end = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    balance_end_real = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    pos_session_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_bank_statement'

class AccountBankStatementLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    ref = models.CharField(max_length=32, blank=True)
    statement = models.ForeignKey(AccountBankStatement)
    sequence = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    company_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    journal_id = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date = models.DateField()
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    voucher = models.ForeignKey('AccountVoucher', blank=True, null=True)
    pos_statement_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_bank_statement_line'

class AccountBankStatementLineMoveRel(models.Model):
    statement_line = models.ForeignKey(AccountBankStatementLine)
    move = models.ForeignKey('AccountMove')
    class Meta:
        managed = False
        db_table = 'account_bank_statement_line_move_rel'

class AccountCashboxLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_statement = models.ForeignKey(AccountBankStatement, blank=True, null=True)
    number_opening = models.IntegerField(blank=True, null=True)
    number_closing = models.IntegerField(blank=True, null=True)
    pieces = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_cashbox_line'

class AccountCentralJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_central_journal'

class AccountCentralJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountCentralJournal)
    journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_central_journal_journal_rel'

class AccountChangeCurrency(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    currency = models.ForeignKey('ResCurrency')
    class Meta:
        managed = False
        db_table = 'account_change_currency'

class AccountChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    target_move = models.CharField(max_length=-1)
    fiscalyear = models.ForeignKey('AccountFiscalyear', db_column='fiscalyear', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_chart'

class AccountChartTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    property_account_expense_categ = models.ForeignKey(AccountAccountTemplate, db_column='property_account_expense_categ', blank=True, null=True)
    property_account_income_opening = models.ForeignKey(AccountAccountTemplate, db_column='property_account_income_opening', blank=True, null=True)
    property_account_expense_opening = models.ForeignKey(AccountAccountTemplate, db_column='property_account_expense_opening', blank=True, null=True)
    visible = models.NullBooleanField()
    tax_code_root = models.ForeignKey('AccountTaxCodeTemplate', blank=True, null=True)
    property_account_income_categ = models.ForeignKey(AccountAccountTemplate, db_column='property_account_income_categ', blank=True, null=True)
    property_account_income = models.ForeignKey(AccountAccountTemplate, db_column='property_account_income', blank=True, null=True)
    complete_tax_set = models.NullBooleanField()
    code_digits = models.IntegerField()
    name = models.CharField(max_length=64)
    property_account_expense = models.ForeignKey(AccountAccountTemplate, db_column='property_account_expense', blank=True, null=True)
    property_account_receivable = models.ForeignKey(AccountAccountTemplate, db_column='property_account_receivable', blank=True, null=True)
    property_account_payable = models.ForeignKey(AccountAccountTemplate, db_column='property_account_payable', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    bank_account_view = models.ForeignKey(AccountAccountTemplate, blank=True, null=True)
    account_root = models.ForeignKey(AccountAccountTemplate, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_chart_template'

class AccountCommonAccountReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    display_account = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_common_account_report'

class AccountCommonAccountReportAccountJournalRel(models.Model):
    account_common_account_report = models.ForeignKey(AccountCommonAccountReport)
    account_journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_common_account_report_account_journal_rel'

class AccountCommonJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_common_journal_report'

class AccountCommonJournalReportAccountJournalRel(models.Model):
    account_common_journal_report = models.ForeignKey(AccountCommonJournalReport)
    account_journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_common_journal_report_account_journal_rel'

class AccountCommonPartnerReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_common_partner_report'

class AccountCommonPartnerReportAccountJournalRel(models.Model):
    account_common_partner_report = models.ForeignKey(AccountCommonPartnerReport)
    account_journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_common_partner_report_account_journal_rel'

class AccountCommonReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey('AccountFiscalyear', blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_common_report'

class AccountCommonReportAccountJournalRel(models.Model):
    account_common_report = models.ForeignKey(AccountCommonReport)
    account_journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_common_report_account_journal_rel'

class AccountConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_stop = models.DateField()
    sale_journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    module_account_voucher = models.NullBooleanField()
    module_account_asset = models.NullBooleanField()
    period = models.CharField(max_length=-1)
    module_account_accountant = models.NullBooleanField()
    module_account_followup = models.NullBooleanField()
    purchase_journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    has_chart_of_accounts = models.NullBooleanField()
    sale_refund_journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    complete_tax_set = models.NullBooleanField()
    module_account_budget = models.NullBooleanField()
    date_start = models.DateField()
    purchase_refund_journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    sale_tax_rate = models.FloatField(blank=True, null=True)
    group_check_supplier_invoice_total = models.NullBooleanField()
    module_account_check_writing = models.NullBooleanField()
    default_purchase_tax = models.ForeignKey('AccountTax', db_column='default_purchase_tax', blank=True, null=True)
    has_default_company = models.NullBooleanField()
    purchase_tax_rate = models.FloatField(blank=True, null=True)
    default_sale_tax = models.ForeignKey('AccountTax', db_column='default_sale_tax', blank=True, null=True)
    has_fiscal_year = models.NullBooleanField()
    module_account_payment = models.NullBooleanField()
    sale_tax = models.ForeignKey('AccountTaxTemplate', db_column='sale_tax', blank=True, null=True)
    group_multi_currency = models.NullBooleanField()
    purchase_tax = models.ForeignKey('AccountTaxTemplate', db_column='purchase_tax', blank=True, null=True)
    group_proforma_invoices = models.NullBooleanField()
    decimal_precision = models.IntegerField(blank=True, null=True)
    code_digits = models.IntegerField(blank=True, null=True)
    chart_template = models.ForeignKey(AccountChartTemplate, blank=True, null=True)
    group_analytic_accounting = models.NullBooleanField()
    group_analytic_account_for_sales = models.NullBooleanField()
    module_sale_analytic_plans = models.NullBooleanField()
    group_payment_options = models.NullBooleanField()
    module_purchase_analytic_plans = models.NullBooleanField()
    group_analytic_account_for_purchases = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_config_settings'

class AccountEntriesReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    date_maturity = models.DateField(blank=True, null=True)
    date_created = models.DateField(blank=True, null=True)
    ref = models.CharField(max_length=64, blank=True)
    move_state = models.CharField(max_length=-1, blank=True)
    move_line_state = models.CharField(max_length=-1, blank=True)
    reconcile_id = models.IntegerField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    product_uom_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    fiscalyear_id = models.IntegerField(blank=True, null=True)
    period_id = models.IntegerField(blank=True, null=True)
    account_id = models.IntegerField(blank=True, null=True)
    analytic_account_id = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    user_type = models.IntegerField(blank=True, null=True)
    nbr = models.IntegerField(blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    amount_currency = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_entries_report'

class AccountFees(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    check_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    partner_bank = models.ForeignKey('ResPartnerBank', blank=True, null=True)
    payment_term = models.ForeignKey('AccountPaymentTerm', db_column='payment_term', blank=True, null=True)
    number = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey('ResCompany')
    currency = models.ForeignKey('ResCurrency')
    fiscal_position = models.ForeignKey('AccountFiscalPosition', db_column='fiscal_position', blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_fees = models.DateField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner')
    journal = models.ForeignKey('AccountJournal')
    amount_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    sent = models.NullBooleanField()
    internal_number = models.CharField(max_length=32, blank=True)
    account = models.ForeignKey(AccountAccount)
    reconciled = models.NullBooleanField()
    residual = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    fees_number = models.CharField(max_length=64, blank=True)
    period = models.ForeignKey('AccountPeriod', blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    move = models.ForeignKey('AccountMove', blank=True, null=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    comment = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'account_fees'

class AccountFeesLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=256, blank=True)
    uos = models.ForeignKey('ProductUom', blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField(blank=True, null=True)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    price_subtotal = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    name = models.TextField()
    discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    fees = models.ForeignKey(AccountFees, blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    partner_id = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_fees_line'

class AccountFeesLineTax(models.Model):
    fees_line = models.ForeignKey(AccountFeesLine)
    tax = models.ForeignKey('AccountTax')
    class Meta:
        managed = False
        db_table = 'account_fees_line_tax'

class AccountFeesTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField(blank=True, null=True)
    manual = models.NullBooleanField()
    company_id = models.IntegerField(blank=True, null=True)
    base_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    fees = models.ForeignKey(AccountFees, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    base = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    tax_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    base_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_fees_tax'

class AccountFinancialReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=128)
    sequence = models.IntegerField(blank=True, null=True)
    level = models.IntegerField(blank=True, null=True)
    style_overwrite = models.IntegerField(blank=True, null=True)
    sign = models.IntegerField()
    account_report = models.ForeignKey('self', blank=True, null=True)
    display_detail = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'account_financial_report'

class AccountFiscalPosition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_fiscal_position'

class AccountFiscalPositionAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    position = models.ForeignKey(AccountFiscalPosition)
    account_dest = models.ForeignKey(AccountAccount)
    account_src = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_fiscal_position_account'

class AccountFiscalPositionAccountTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    position = models.ForeignKey('AccountFiscalPositionTemplate')
    account_dest = models.ForeignKey(AccountAccountTemplate)
    account_src = models.ForeignKey(AccountAccountTemplate)
    class Meta:
        managed = False
        db_table = 'account_fiscal_position_account_template'

class AccountFiscalPositionTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    position = models.ForeignKey(AccountFiscalPosition)
    tax_dest = models.ForeignKey('AccountTax', blank=True, null=True)
    tax_src = models.ForeignKey('AccountTax')
    class Meta:
        managed = False
        db_table = 'account_fiscal_position_tax'

class AccountFiscalPositionTaxTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    position = models.ForeignKey('AccountFiscalPositionTemplate')
    tax_dest = models.ForeignKey('AccountTaxTemplate', blank=True, null=True)
    tax_src = models.ForeignKey('AccountTaxTemplate')
    class Meta:
        managed = False
        db_table = 'account_fiscal_position_tax_template'

class AccountFiscalPositionTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    chart_template = models.ForeignKey(AccountChartTemplate)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_fiscal_position_template'

class AccountFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_stop = models.DateField()
    code = models.CharField(max_length=6)
    name = models.CharField(max_length=64)
    end_journal_period = models.ForeignKey('AccountJournalPeriod', blank=True, null=True)
    date_start = models.DateField()
    company = models.ForeignKey('ResCompany')
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'account_fiscalyear'

class AccountFiscalyearClose(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    fy = models.ForeignKey(AccountFiscalyear)
    fy2 = models.ForeignKey(AccountFiscalyear)
    period = models.ForeignKey('AccountPeriod')
    journal = models.ForeignKey('AccountJournal')
    report_name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_fiscalyear_close'

class AccountFiscalyearCloseState(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    fy = models.ForeignKey(AccountFiscalyear)
    class Meta:
        managed = False
        db_table = 'account_fiscalyear_close_state'

class AccountFollowupFollowup(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    company = models.ForeignKey('ResCompany', unique=True)
    class Meta:
        managed = False
        db_table = 'account_followup_followup'

class AccountFollowupFollowupLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    manual_action_note = models.TextField(blank=True)
    description = models.TextField(blank=True)
    send_letter = models.NullBooleanField()
    sequence = models.IntegerField(blank=True, null=True)
    manual_action_responsible = models.ForeignKey('ResUsers', blank=True, null=True)
    delay = models.IntegerField()
    send_email = models.NullBooleanField()
    manual_action = models.NullBooleanField()
    email_template = models.ForeignKey('EmailTemplate', blank=True, null=True)
    followup = models.ForeignKey(AccountFollowupFollowup)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_followup_followup_line'

class AccountFollowupPrint(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    email_conf = models.NullBooleanField()
    partner_lang = models.NullBooleanField()
    company_id = models.IntegerField(blank=True, null=True)
    test_print = models.NullBooleanField()
    summary = models.TextField(blank=True)
    date = models.DateField()
    email_body = models.TextField(blank=True)
    email_subject = models.CharField(max_length=64, blank=True)
    followup = models.ForeignKey(AccountFollowupFollowup)
    class Meta:
        managed = False
        db_table = 'account_followup_print'

class AccountFollowupSendingResults(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    needprinting = models.NullBooleanField()
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'account_followup_sending_results'

class AccountFollowupStat(models.Model):
    id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    date_move = models.DateField(blank=True, null=True)
    date_move_last = models.DateField(blank=True, null=True)
    date_followup = models.DateField(blank=True, null=True)
    followup_id = models.IntegerField(blank=True, null=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    blocked = models.NullBooleanField()
    period_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_followup_stat'

class AccountFollowupStatByPartner(models.Model):
    id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    date_move = models.DateField(blank=True, null=True)
    date_move_last = models.DateField(blank=True, null=True)
    date_followup = models.DateField(blank=True, null=True)
    max_followup_id = models.IntegerField(blank=True, null=True)
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_followup_stat_by_partner'

class AccountGeneralJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_general_journal'

class AccountGeneralJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountGeneralJournal)
    journal = models.ForeignKey('AccountJournal')
    class Meta:
        managed = False
        db_table = 'account_general_journal_journal_rel'

class AccountInstaller(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_stop = models.DateField()
    charts = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany')
    date_start = models.DateField()
    period = models.CharField(max_length=-1)
    has_default_company = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_installer'

class AccountInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    date_due = models.DateField(blank=True, null=True)
    check_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    reference = models.CharField(max_length=64, blank=True)
    supplier_invoice_number = models.CharField(max_length=64, blank=True)
    number = models.CharField(max_length=64, blank=True)
    account = models.ForeignKey(AccountAccount)
    company = models.ForeignKey('ResCompany')
    currency = models.ForeignKey('ResCurrency')
    partner = models.ForeignKey('ResPartner')
    fiscal_position = models.ForeignKey(AccountFiscalPosition, db_column='fiscal_position', blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    partner_bank = models.ForeignKey('ResPartnerBank', blank=True, null=True)
    payment_term = models.ForeignKey('AccountPaymentTerm', db_column='payment_term', blank=True, null=True)
    reference_type = models.CharField(max_length=-1)
    journal = models.ForeignKey('AccountJournal')
    amount_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    internal_number = models.CharField(max_length=32, blank=True)
    reconciled = models.NullBooleanField()
    residual = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    move_name = models.CharField(max_length=64, blank=True)
    date_invoice = models.DateField(blank=True, null=True)
    period = models.ForeignKey('AccountPeriod', blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    move = models.ForeignKey('AccountMove', blank=True, null=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    comment = models.TextField(blank=True)
    sent = models.NullBooleanField()
    commercial_partner_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice'

class AccountInvoiceCancel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice_cancel'

class AccountInvoiceConfirm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice_confirm'

class AccountInvoiceLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=256, blank=True)
    uos = models.ForeignKey('ProductUom', blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    name = models.TextField()
    sequence = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, blank=True, null=True)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    price_subtotal = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    partner_id = models.IntegerField(blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    asset_category = models.ForeignKey(AccountAssetCategory, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice_line'

class AccountInvoiceLineTax(models.Model):
    invoice_line = models.ForeignKey(AccountInvoiceLine)
    tax = models.ForeignKey('AccountTax')
    class Meta:
        managed = False
        db_table = 'account_invoice_line_tax'

class AccountInvoiceRefund(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    journal = models.ForeignKey('AccountJournal', blank=True, null=True)
    filter_refund = models.CharField(max_length=-1)
    description = models.CharField(max_length=128)
    period = models.ForeignKey('AccountPeriod', db_column='period', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice_refund'

class AccountInvoiceReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    product_id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    payment_term = models.IntegerField(blank=True, null=True)
    period_id = models.IntegerField(blank=True, null=True)
    uom_name = models.CharField(max_length=64, blank=True)
    currency_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    fiscal_position = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    categ_id = models.IntegerField(blank=True, null=True)
    date_due = models.DateField(blank=True, null=True)
    account_id = models.IntegerField(blank=True, null=True)
    account_line_id = models.IntegerField(blank=True, null=True)
    partner_bank_id = models.IntegerField(blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_average = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency_rate = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    residual = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    commercial_partner_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_invoice_report'

class AccountInvoiceTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField(blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, blank=True, null=True)
    manual = models.NullBooleanField()
    company_id = models.IntegerField(blank=True, null=True)
    base_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    base = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    tax_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    base_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_invoice_tax'

class AccountJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    default_debit_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    code = models.CharField(max_length=5)
    default_credit_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    loss_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    currency = models.ForeignKey('ResCurrency', db_column='currency', blank=True, null=True)
    internal_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    allow_date = models.NullBooleanField()
    sequence = models.ForeignKey('IrSequence')
    update_posted = models.NullBooleanField()
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=64)
    cash_control = models.NullBooleanField()
    centralisation = models.NullBooleanField()
    group_invoice_lines = models.NullBooleanField()
    with_last_closing_balance = models.NullBooleanField()
    company = models.ForeignKey('ResCompany')
    analytic_journal = models.ForeignKey(AccountAnalyticJournal, blank=True, null=True)
    profit_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    entry_posted = models.NullBooleanField()
    type = models.CharField(max_length=32)
    internal_sequence_id = models.IntegerField(blank=True, null=True)
    invoice_sequence_id = models.IntegerField(blank=True, null=True)
    self_checkout_payment_method = models.NullBooleanField()
    journal_user = models.ForeignKey('IrSequence', db_column='journal_user', blank=True, null=True)
    amount_authorized_diff = models.ForeignKey('IrSequence', db_column='amount_authorized_diff', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_journal'

class AccountJournalAccountVatDeclarationRel(models.Model):
    account_vat_declaration = models.ForeignKey('AccountVatDeclaration')
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_journal_account_vat_declaration_rel'

class AccountJournalAccountingReportRel(models.Model):
    accounting_report = models.ForeignKey('AccountingReport')
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_journal_accounting_report_rel'

class AccountJournalCashboxLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    pieces = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_journal_cashbox_line'

class AccountJournalGroupRel(models.Model):
    journal = models.ForeignKey(AccountJournal)
    group = models.ForeignKey('ResGroups')
    class Meta:
        managed = False
        db_table = 'account_journal_group_rel'

class AccountJournalPeriod(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1)
    company_id = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    period = models.ForeignKey('AccountPeriod')
    active = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_journal_period'

class AccountJournalSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_journal_select'

class AccountJournalTypeRel(models.Model):
    journal = models.ForeignKey(AccountJournal)
    type = models.ForeignKey(AccountAccountType)
    class Meta:
        managed = False
        db_table = 'account_journal_type_rel'

class AccountModel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    company_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64)
    legend = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'account_model'

class AccountModelLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    model = models.ForeignKey(AccountModel)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField()
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_maturity = models.CharField(max_length=-1, blank=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount_currency = models.FloatField(blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_model_line'

class AccountMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1)
    ref = models.CharField(max_length=64, blank=True)
    company_id = models.IntegerField(blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    period = models.ForeignKey('AccountPeriod')
    narration = models.TextField(blank=True)
    date = models.DateField()
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    to_check = models.NullBooleanField()
    internal_sequence_number = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'account_move'

class AccountMoveBankReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_move_bank_reconcile'

class AccountMoveLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    statement = models.ForeignKey(AccountBankStatement, blank=True, null=True)
    journal_id = models.IntegerField()
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    date_maturity = models.DateField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    reconcile_partial = models.ForeignKey('AccountMoveReconcile', blank=True, null=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    centralisation = models.CharField(max_length=8, blank=True)
    company_id = models.IntegerField(blank=True, null=True)
    tax_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    blocked = models.NullBooleanField()
    ref = models.CharField(max_length=64, blank=True)
    account = models.ForeignKey(AccountAccount)
    period_id = models.IntegerField()
    date_created = models.DateField(blank=True, null=True)
    date = models.DateField()
    move = models.ForeignKey(AccountMove)
    name = models.CharField(max_length=64)
    reconcile = models.ForeignKey('AccountMoveReconcile', blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    account_tax = models.ForeignKey('AccountTax', blank=True, null=True)
    product_uom = models.ForeignKey('ProductUom', blank=True, null=True)
    amount_currency = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    asset = models.ForeignKey(AccountAssetAsset, blank=True, null=True)
    followup_date = models.DateField(blank=True, null=True)
    followup_line = models.ForeignKey(AccountFollowupFollowupLine, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_move_line'

class AccountMoveLineReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    trans_nbr = models.IntegerField(blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    writeoff = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_move_line_reconcile'

class AccountMoveLineReconcileSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_move_line_reconcile_select'

class AccountMoveLineReconcileWriteoff(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.CharField(max_length=64)
    analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    writeoff_acc = models.ForeignKey(AccountAccount)
    journal = models.ForeignKey(AccountJournal)
    date_p = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_move_line_reconcile_writeoff'

class AccountMoveLineRelation(models.Model):
    move = models.ForeignKey('AccountStatementFromInvoiceLines')
    line = models.ForeignKey(AccountMoveLine)
    class Meta:
        managed = False
        db_table = 'account_move_line_relation'

class AccountMoveLineUnreconcileSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'account_move_line_unreconcile_select'

class AccountMoveReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    opening_reconciliation = models.NullBooleanField()
    type = models.CharField(max_length=16)
    class Meta:
        managed = False
        db_table = 'account_move_reconcile'

class AccountOpenClosedFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    fyear = models.ForeignKey(AccountFiscalyear)
    class Meta:
        managed = False
        db_table = 'account_open_closed_fiscalyear'

class AccountPartnerBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    display_partner = models.CharField(max_length=-1, blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_partner_balance'

class AccountPartnerBalanceJournalRel(models.Model):
    account = models.ForeignKey(AccountPartnerBalance)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_partner_balance_journal_rel'

class AccountPartnerLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    initial_balance = models.NullBooleanField()
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey('AccountPeriod', db_column='period_to', blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey('AccountPeriod', db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    page_split = models.NullBooleanField()
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_partner_ledger'

class AccountPartnerLedgerJournalRel(models.Model):
    account = models.ForeignKey(AccountPartnerLedger)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_partner_ledger_journal_rel'

class AccountPartnerReconcileProcess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    progress = models.FloatField(blank=True, null=True)
    today_reconciled = models.FloatField(blank=True, null=True)
    next_partner = models.ForeignKey('ResPartner', blank=True, null=True)
    to_reconcile = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_partner_reconcile_process'

class AccountPaymentMakePayment(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_payment_make_payment'

class AccountPaymentPopulateStatement(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_payment_populate_statement'

class AccountPaymentTerm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    note = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'account_payment_term'

class AccountPaymentTermLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    payment = models.ForeignKey(AccountPaymentTerm)
    days2 = models.IntegerField()
    value = models.CharField(max_length=-1)
    value_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    days = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'account_payment_term_line'

class AccountPeriod(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_stop = models.DateField()
    code = models.CharField(max_length=12, blank=True)
    name = models.CharField(max_length=64)
    date_start = models.DateField()
    fiscalyear = models.ForeignKey(AccountFiscalyear)
    company_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    special = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_period'

class AccountPeriodClose(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    sure = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_period_close'

class AccountPrintJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    sort_selection = models.CharField(max_length=-1)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey(AccountPeriod, db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_print_journal'

class AccountPrintJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountPrintJournal)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_print_journal_journal_rel'

class AccountReportGeneralLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    initial_balance = models.NullBooleanField()
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey(AccountPeriod, db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    sortby = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    date_to = models.DateField(blank=True, null=True)
    amount_currency = models.NullBooleanField()
    display_account = models.CharField(max_length=-1)
    landscape = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_report_general_ledger'

class AccountReportGeneralLedgerJournalRel(models.Model):
    account = models.ForeignKey(AccountReportGeneralLedger)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'account_report_general_ledger_journal_rel'

class AccountSequenceFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    sequence = models.ForeignKey('IrSequence')
    fiscalyear = models.ForeignKey(AccountFiscalyear)
    sequence_main = models.ForeignKey('IrSequence')
    class Meta:
        managed = False
        db_table = 'account_sequence_fiscalyear'

class AccountSequenceInstaller(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    padding = models.IntegerField()
    number_increment = models.IntegerField()
    prefix = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    number_next = models.IntegerField()
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    suffix = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'account_sequence_installer'

class AccountStateOpen(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_state_open'

class AccountStatementFromInvoiceLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_statement_from_invoice_lines'

class AccountSubscription(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(AccountModel)
    period_nbr = models.IntegerField()
    name = models.CharField(max_length=64)
    date_start = models.DateField()
    period_total = models.IntegerField()
    state = models.CharField(max_length=-1)
    period_type = models.CharField(max_length=-1)
    ref = models.CharField(max_length=16, blank=True)
    class Meta:
        managed = False
        db_table = 'account_subscription'

class AccountSubscriptionGenerate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date = models.DateField()
    class Meta:
        managed = False
        db_table = 'account_subscription_generate'

class AccountSubscriptionLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date = models.DateField()
    subscription = models.ForeignKey(AccountSubscription)
    move = models.ForeignKey(AccountMove, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_subscription_line'

class AccountTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    ref_base_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    domain = models.CharField(max_length=32, blank=True)
    description = models.CharField(max_length=-1, blank=True)
    ref_tax_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    sequence = models.IntegerField()
    account_paid = models.ForeignKey(AccountAccount, blank=True, null=True)
    ref_base_sign = models.FloatField(blank=True, null=True)
    type_tax_use = models.CharField(max_length=-1)
    base_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    base_sign = models.FloatField(blank=True, null=True)
    child_depend = models.NullBooleanField()
    include_base_amount = models.NullBooleanField()
    account_analytic_collected = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    account_analytic_paid = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    active = models.NullBooleanField()
    ref_tax_sign = models.FloatField(blank=True, null=True)
    applicable_type = models.CharField(max_length=-1)
    account_collected = models.ForeignKey(AccountAccount, blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    name = models.CharField(max_length=64)
    tax_code = models.ForeignKey('AccountTaxCode', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    python_compute = models.TextField(blank=True)
    tax_sign = models.FloatField(blank=True, null=True)
    python_compute_inv = models.TextField(blank=True)
    python_applicable = models.TextField(blank=True)
    type = models.CharField(max_length=-1)
    price_include = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_tax'

class AccountTaxChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    period = models.ForeignKey(AccountPeriod, blank=True, null=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_tax_chart'

class AccountTaxCode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    info = models.TextField(blank=True)
    code = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    sign = models.FloatField()
    notprintable = models.NullBooleanField()
    parent = models.ForeignKey('self', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_tax_code'

class AccountTaxCodeTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    info = models.TextField(blank=True)
    notprintable = models.NullBooleanField()
    code = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    parent = models.ForeignKey('self', blank=True, null=True)
    sign = models.FloatField()
    class Meta:
        managed = False
        db_table = 'account_tax_code_template'

class AccountTaxTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    ref_base_code = models.ForeignKey(AccountTaxCodeTemplate, blank=True, null=True)
    domain = models.CharField(max_length=32, blank=True)
    description = models.CharField(max_length=-1, blank=True)
    ref_tax_code = models.ForeignKey(AccountTaxCodeTemplate, blank=True, null=True)
    sequence = models.IntegerField()
    ref_base_sign = models.FloatField(blank=True, null=True)
    type_tax_use = models.CharField(max_length=-1)
    base_code = models.ForeignKey(AccountTaxCodeTemplate, blank=True, null=True)
    base_sign = models.FloatField(blank=True, null=True)
    child_depend = models.NullBooleanField()
    include_base_amount = models.NullBooleanField()
    applicable_type = models.CharField(max_length=-1)
    ref_tax_sign = models.FloatField(blank=True, null=True)
    account_paid = models.ForeignKey(AccountAccountTemplate, blank=True, null=True)
    account_collected = models.ForeignKey(AccountAccountTemplate, blank=True, null=True)
    chart_template = models.ForeignKey(AccountChartTemplate)
    name = models.CharField(max_length=64)
    tax_code = models.ForeignKey(AccountTaxCodeTemplate, blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    python_compute = models.TextField(blank=True)
    tax_sign = models.FloatField(blank=True, null=True)
    python_compute_inv = models.TextField(blank=True)
    python_applicable = models.TextField(blank=True)
    type = models.CharField(max_length=-1)
    price_include = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'account_tax_template'

class AccountTemplateFinancialReport(models.Model):
    account_template = models.ForeignKey(AccountAccountTemplate)
    report_line = models.ForeignKey(AccountFinancialReport)
    class Meta:
        managed = False
        db_table = 'account_template_financial_report'

class AccountTreasuryReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    fiscalyear_id = models.IntegerField(blank=True, null=True)
    period_id = models.IntegerField(blank=True, null=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_treasury_report'

class AccountUnreconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_unreconcile'

class AccountUnreconcileReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_unreconcile_reconcile'

class AccountUseModel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'account_use_model'

class AccountUseModelRelation(models.Model):
    account = models.ForeignKey(AccountUseModel)
    model = models.ForeignKey(AccountModel)
    class Meta:
        managed = False
        db_table = 'account_use_model_relation'

class AccountVatDeclaration(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    period_to = models.ForeignKey(AccountPeriod, db_column='period_to', blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, db_column='period_from', blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    based_on = models.CharField(max_length=-1)
    display_detail = models.NullBooleanField()
    chart_tax = models.ForeignKey(AccountTaxCode)
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'account_vat_declaration'

class AccountVoucher(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.CharField(max_length=64)
    date_due = models.DateField(blank=True, null=True)
    is_multi_currency = models.NullBooleanField()
    reference = models.CharField(max_length=64, blank=True)
    number = models.CharField(max_length=32, blank=True)
    writeoff_acc = models.ForeignKey(AccountAccount, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    narration = models.TextField(blank=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    payment_rate_currency = models.ForeignKey('ResCurrency')
    pay_now = models.CharField(max_length=-1, blank=True)
    company = models.ForeignKey('ResCompany')
    state = models.CharField(max_length=32, blank=True)
    pre_line = models.NullBooleanField()
    payment_rate = models.DecimalField(max_digits=65535, decimal_places=65535)
    type = models.CharField(max_length=-1, blank=True)
    payment_option = models.CharField(max_length=-1)
    account = models.ForeignKey(AccountAccount)
    period = models.ForeignKey(AccountPeriod)
    active = models.NullBooleanField()
    move = models.ForeignKey(AccountMove, blank=True, null=True)
    tax = models.ForeignKey(AccountTax, blank=True, null=True)
    tax_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=256, blank=True)
    analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    journal = models.ForeignKey(AccountJournal)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'account_voucher'

class AccountVoucherLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    reconcile = models.NullBooleanField()
    voucher = models.ForeignKey(AccountVoucher)
    amount_unreconciled = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account = models.ForeignKey(AccountAccount)
    name = models.CharField(max_length=256, blank=True)
    move_line = models.ForeignKey(AccountMoveLine, blank=True, null=True)
    untax_amount = models.FloatField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    amount_original = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'account_voucher_line'

class AccountingReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    period_to_cmp = models.ForeignKey(AccountPeriod, db_column='period_to_cmp', blank=True, null=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_from_cmp = models.ForeignKey(AccountPeriod, db_column='period_from_cmp', blank=True, null=True)
    filter_cmp = models.CharField(max_length=-1)
    enable_filter = models.NullBooleanField()
    period_to = models.ForeignKey(AccountPeriod, db_column='period_to', blank=True, null=True)
    date_to_cmp = models.DateField(blank=True, null=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, blank=True, null=True)
    date_to = models.DateField(blank=True, null=True)
    account_report = models.ForeignKey(AccountFinancialReport)
    fiscalyear_id_cmp = models.ForeignKey(AccountFiscalyear, db_column='fiscalyear_id_cmp', blank=True, null=True)
    date_from = models.DateField(blank=True, null=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, db_column='period_from', blank=True, null=True)
    label_filter = models.CharField(max_length=32, blank=True)
    date_from_cmp = models.DateField(blank=True, null=True)
    debit_credit = models.NullBooleanField()
    target_move = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'accounting_report'

class ActionTraceability(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'action_traceability'

class AnalyticEntriesReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    user_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=256, blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    account_id = models.IntegerField(blank=True, null=True)
    general_account_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    move_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    product_uom_id = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    unit_amount = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'analytic_entries_report'

class AssetAssetReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    depreciation_date = models.DateField(blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    gross_value = models.FloatField(blank=True, null=True)
    depreciation_value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    posted_value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    unposted_value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    asset_id = models.IntegerField(blank=True, null=True)
    move_check = models.NullBooleanField()
    asset_category_id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'asset_asset_report'

class AssetDepreciationConfirmationWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    period = models.ForeignKey(AccountPeriod)
    class Meta:
        managed = False
        db_table = 'asset_depreciation_confirmation_wizard'

class AssetModify(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    method_number = models.IntegerField()
    note = models.TextField(blank=True)
    method_period = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64)
    method_end = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'asset_modify'

class BaseActionRule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey('IrModel')
    filter_pre = models.ForeignKey('IrFilters', blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    act_user = models.ForeignKey('ResUsers', blank=True, null=True)
    last_run = models.DateTimeField(blank=True, null=True)
    trg_date = models.ForeignKey('IrModelFields', blank=True, null=True)
    trg_date_range_type = models.CharField(max_length=-1, blank=True)
    filter = models.ForeignKey('IrFilters', blank=True, null=True)
    active = models.NullBooleanField()
    trg_date_range = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'base_action_rule'

class BaseActionRuleIrActServerRel(models.Model):
    base_action_rule = models.ForeignKey(BaseActionRule)
    ir_act_server = models.ForeignKey('IrActServer')
    class Meta:
        managed = False
        db_table = 'base_action_rule_ir_act_server_rel'

class BaseActionRuleLeadTest(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    date_action_last = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_action_rule_lead_test'

class BaseActionRuleResPartnerRel(models.Model):
    base_action_rule = models.ForeignKey(BaseActionRule)
    res_partner = models.ForeignKey('ResPartner')
    class Meta:
        managed = False
        db_table = 'base_action_rule_res_partner_rel'

class BaseConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_portal = models.NullBooleanField()
    module_base_import = models.NullBooleanField()
    module_share = models.NullBooleanField()
    module_auth_oauth = models.NullBooleanField()
    module_portal_anonymous = models.NullBooleanField()
    module_multi_company = models.NullBooleanField()
    alias_domain = models.CharField(max_length=-1, blank=True)
    auth_signup_uninvited = models.NullBooleanField()
    auth_signup_reset_password = models.NullBooleanField()
    auth_signup_template_user = models.ForeignKey('ResUsers', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_config_settings'

class BaseImportImport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    file_type = models.CharField(max_length=-1, blank=True)
    res_model = models.CharField(max_length=64, blank=True)
    file = models.BinaryField(blank=True, null=True)
    file_name = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_import'

class BaseImportTestsModelsChar(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char'

class BaseImportTestsModelsCharNoreadonly(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char_noreadonly'

class BaseImportTestsModelsCharReadonly(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char_readonly'

class BaseImportTestsModelsCharRequired(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char_required'

class BaseImportTestsModelsCharStates(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char_states'

class BaseImportTestsModelsCharStillreadonly(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_char_stillreadonly'

class BaseImportTestsModelsM2O(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.ForeignKey('BaseImportTestsModelsM2ORelated', db_column='value', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_m2o'

class BaseImportTestsModelsM2ORelated(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_m2o_related'

class BaseImportTestsModelsM2ORequired(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.ForeignKey('BaseImportTestsModelsM2ORequiredRelated', db_column='value')
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_m2o_required'

class BaseImportTestsModelsM2ORequiredRelated(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_m2o_required_related'

class BaseImportTestsModelsO2M(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_o2m'

class BaseImportTestsModelsO2MChild(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    parent = models.ForeignKey(BaseImportTestsModelsO2M, blank=True, null=True)
    value = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_o2m_child'

class BaseImportTestsModelsPreview(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    somevalue = models.IntegerField()
    othervalue = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_import_tests_models_preview'

class BaseLanguageExport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    format = models.CharField(max_length=-1)
    data = models.BinaryField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_language_export'

class BaseLanguageImport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=5)
    data = models.BinaryField()
    name = models.CharField(max_length=64)
    overwrite = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'base_language_import'

class BaseLanguageInstall(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True)
    overwrite = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'base_language_install'

class BaseModuleConfiguration(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'base_module_configuration'

class BaseModuleImport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_name = models.CharField(max_length=128, blank=True)
    module_file = models.BinaryField()
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_module_import'

class BaseModuleUpdate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    add = models.IntegerField(blank=True, null=True)
    update = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'base_module_update'

class BaseModuleUpgrade(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_info = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'base_module_upgrade'

class BaseSetupTerminology(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    partner = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'base_setup_terminology'

class BaseUpdateTranslations(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'base_update_translations'

class BoardCreate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    menu_parent = models.ForeignKey('IrUiMenu')
    class Meta:
        managed = False
        db_table = 'board_create'

class CashBoxIn(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    ref = models.CharField(max_length=32, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'cash_box_in'

class CashBoxOut(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'cash_box_out'

class ChangePasswordUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user_login = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey('ResUsers')
    new_passwd = models.CharField(max_length=-1, blank=True)
    wizard = models.ForeignKey('ChangePasswordWizard')
    class Meta:
        managed = False
        db_table = 'change_password_user'

class ChangePasswordWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'change_password_wizard'

class ChangeProductionQty(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'change_production_qty'

class DecimalPrecision(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    digits = models.IntegerField()
    name = models.CharField(unique=True, max_length=50)
    class Meta:
        managed = False
        db_table = 'decimal_precision'

class EmailTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey('IrModel', blank=True, null=True)
    sub_model_object_field = models.ForeignKey('IrModelFields', db_column='sub_model_object_field', blank=True, null=True)
    auto_delete = models.NullBooleanField()
    mail_server = models.ForeignKey('IrMailServer', blank=True, null=True)
    body_html = models.TextField(blank=True)
    email_to = models.CharField(max_length=-1, blank=True)
    sub_object = models.ForeignKey('IrModel', db_column='sub_object', blank=True, null=True)
    ref_ir_act_window = models.ForeignKey('IrActWindow', db_column='ref_ir_act_window', blank=True, null=True)
    subject = models.CharField(max_length=-1, blank=True)
    lang = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    email_recipients = models.CharField(max_length=-1, blank=True)
    model_object_field = models.ForeignKey('IrModelFields', db_column='model_object_field', blank=True, null=True)
    report_name = models.CharField(max_length=-1, blank=True)
    report_template = models.ForeignKey('IrActReportXml', db_column='report_template', blank=True, null=True)
    ref_ir_value = models.ForeignKey('IrValues', db_column='ref_ir_value', blank=True, null=True)
    user_signature = models.NullBooleanField()
    null_value = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    model_0 = models.CharField(db_column='model', max_length=128, blank=True) # Field renamed because of name conflict.
    copyvalue = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'email_template'

class EmailTemplateAttachmentRel(models.Model):
    email_template = models.ForeignKey(EmailTemplate)
    attachment = models.ForeignKey('IrAttachment')
    class Meta:
        managed = False
        db_table = 'email_template_attachment_rel'

class EmailTemplatePreview(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey('IrModel', blank=True, null=True)
    sub_model_object_field = models.ForeignKey('IrModelFields', db_column='sub_model_object_field', blank=True, null=True)
    auto_delete = models.NullBooleanField()
    mail_server = models.ForeignKey('IrMailServer', blank=True, null=True)
    body_html = models.TextField(blank=True)
    email_to = models.CharField(max_length=-1, blank=True)
    sub_object = models.ForeignKey('IrModel', db_column='sub_object', blank=True, null=True)
    ref_ir_act_window = models.ForeignKey('IrActWindow', db_column='ref_ir_act_window', blank=True, null=True)
    subject = models.CharField(max_length=-1, blank=True)
    lang = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    email_recipients = models.CharField(max_length=-1, blank=True)
    model_object_field = models.ForeignKey('IrModelFields', db_column='model_object_field', blank=True, null=True)
    report_name = models.CharField(max_length=-1, blank=True)
    report_template = models.ForeignKey('IrActReportXml', db_column='report_template', blank=True, null=True)
    ref_ir_value = models.ForeignKey('IrValues', db_column='ref_ir_value', blank=True, null=True)
    user_signature = models.NullBooleanField()
    null_value = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    model_0 = models.CharField(db_column='model', max_length=128, blank=True) # Field renamed because of name conflict.
    copyvalue = models.CharField(max_length=-1, blank=True)
    res_id = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'email_template_preview'

class EntregaTecnica(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    commune = models.CharField(max_length=100, blank=True)
    number_p = models.CharField(max_length=60)
    date_c = models.DateField(blank=True, null=True)
    date_b = models.DateField()
    date_a = models.DateField()
    profession = models.CharField(max_length=200, blank=True)
    phone = models.CharField(max_length=15, blank=True)
    date_s = models.DateField()
    user = models.ForeignKey('ResUsers', db_column='user', blank=True, null=True)
    address = models.CharField(max_length=200, blank=True)
    distributor = models.ForeignKey('ResPartner', db_column='distributor', blank=True, null=True)
    region = models.CharField(max_length=100, blank=True)
    rut = models.CharField(max_length=15, blank=True)
    name = models.CharField(max_length=150)
    city = models.CharField(max_length=50, blank=True)
    number_cg = models.CharField(max_length=200)
    mobile = models.CharField(max_length=15, blank=True)
    per_g = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    client = models.ForeignKey('ResPartner', db_column='client')
    equipment = models.ForeignKey('ProductProduct', db_column='equipment')
    state = models.CharField(max_length=-1, blank=True)
    internal = models.NullBooleanField()
    sub_distributor = models.ForeignKey('ResPartner', db_column='sub_distributor', blank=True, null=True)
    model = models.CharField(max_length=200)
    number_fb = models.CharField(max_length=150)
    email = models.CharField(max_length=200, blank=True)
    number_g = models.CharField(max_length=60)
    class Meta:
        managed = False
        db_table = 'entrega_tecnica'

class FetchmailConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'fetchmail_config_settings'

class FetchmailServer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    user = models.CharField(max_length=256, blank=True)
    date = models.DateTimeField(blank=True, null=True)
    configuration = models.TextField(blank=True)
    port = models.IntegerField(blank=True, null=True)
    password = models.CharField(max_length=1024, blank=True)
    name = models.CharField(max_length=256)
    script = models.CharField(max_length=64, blank=True)
    is_ssl = models.NullBooleanField()
    object = models.ForeignKey('IrModel', blank=True, null=True)
    server = models.CharField(max_length=256, blank=True)
    priority = models.IntegerField(blank=True, null=True)
    attach = models.NullBooleanField()
    state = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1)
    original = models.NullBooleanField()
    action = models.ForeignKey('IrActServer', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'fetchmail_server'

class IrActClient(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    res_model = models.CharField(max_length=64, blank=True)
    params_store = models.BinaryField(blank=True, null=True)
    tag = models.CharField(max_length=64)
    context = models.CharField(max_length=250)
    class Meta:
        managed = False
        db_table = 'ir_act_client'

class IrActReportCustom(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    report_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_act_report_custom'

class IrActReportXml(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    model = models.CharField(max_length=64)
    report_name = models.CharField(max_length=64)
    report_xsl = models.CharField(max_length=256, blank=True)
    report_xml = models.CharField(max_length=256, blank=True)
    auto = models.NullBooleanField()
    report_rml_content_data = models.BinaryField(blank=True, null=True)
    header = models.NullBooleanField()
    report_type = models.CharField(max_length=32)
    report_file = models.CharField(max_length=256, blank=True)
    multi = models.NullBooleanField()
    report_rml = models.CharField(max_length=256, blank=True)
    attachment = models.CharField(max_length=128, blank=True)
    report_sxw_content_data = models.BinaryField(blank=True, null=True)
    attachment_use = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'ir_act_report_xml'

class IrActServer(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    model = models.ForeignKey('IrModel')
    code = models.TextField(blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    sms = models.CharField(max_length=160, blank=True)
    write_id = models.CharField(max_length=256, blank=True)
    srcmodel = models.ForeignKey('IrModel', blank=True, null=True)
    message = models.TextField(blank=True)
    trigger_name = models.CharField(max_length=128, blank=True)
    condition = models.CharField(max_length=256)
    subject = models.CharField(max_length=1024, blank=True)
    loop_action = models.ForeignKey('self', db_column='loop_action', blank=True, null=True)
    trigger_obj = models.ForeignKey('IrModelFields', blank=True, null=True)
    mobile = models.CharField(max_length=512, blank=True)
    copy_object = models.CharField(max_length=256, blank=True)
    wkf_model = models.ForeignKey('IrModel', blank=True, null=True)
    state = models.CharField(max_length=32)
    record = models.ForeignKey('IrModelFields', blank=True, null=True)
    expression = models.CharField(max_length=512, blank=True)
    email = models.CharField(max_length=512, blank=True)
    action_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_act_server'

class IrActUrl(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    url = models.TextField()
    target = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'ir_act_url'

class IrActWindow(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    view = models.ForeignKey('IrUiView', blank=True, null=True)
    res_model = models.CharField(max_length=64)
    view_type = models.CharField(max_length=16)
    domain = models.CharField(max_length=250, blank=True)
    search_view = models.ForeignKey('IrUiView', blank=True, null=True)
    auto_refresh = models.IntegerField(blank=True, null=True)
    view_mode = models.CharField(max_length=250)
    multi = models.NullBooleanField()
    context = models.CharField(max_length=250)
    target = models.CharField(max_length=-1, blank=True)
    auto_search = models.NullBooleanField()
    filter = models.NullBooleanField()
    src_model = models.CharField(max_length=64, blank=True)
    limit = models.IntegerField(blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_act_window'

class IrActWindowGroupRel(models.Model):
    act = models.ForeignKey(IrActWindow)
    gid = models.ForeignKey('ResGroups', db_column='gid')
    class Meta:
        managed = False
        db_table = 'ir_act_window_group_rel'

class IrActWindowView(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    act_window = models.ForeignKey(IrActWindow, blank=True, null=True)
    multi = models.NullBooleanField()
    view_mode = models.CharField(max_length=-1)
    view = models.ForeignKey('IrUiView', blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_act_window_view'

class IrActWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True)
    wiz_name = models.CharField(max_length=64)
    multi = models.NullBooleanField()
    model = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_act_wizard'

class IrActions(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    help = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'ir_actions'

class IrActionsConfigurationWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'ir_actions_configuration_wizard'

class IrActionsTodo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    state = models.CharField(max_length=-1)
    name = models.CharField(max_length=64, blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    action_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'ir_actions_todo'

class IrAttachment(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    description = models.TextField(blank=True)
    datas_fname = models.CharField(max_length=256, blank=True)
    url = models.CharField(max_length=1024, blank=True)
    res_model = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    res_name = models.CharField(max_length=128, blank=True)
    type = models.CharField(max_length=-1)
    res_id = models.IntegerField(blank=True, null=True)
    file_size = models.IntegerField(blank=True, null=True)
    db_datas = models.BinaryField(blank=True, null=True)
    store_fname = models.CharField(max_length=256, blank=True)
    name = models.CharField(max_length=256)
    class Meta:
        managed = False
        db_table = 'ir_attachment'

class IrConfigParameter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    key = models.CharField(unique=True, max_length=256)
    value = models.TextField()
    class Meta:
        managed = False
        db_table = 'ir_config_parameter'

class IrCron(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    function = models.CharField(max_length=64, blank=True)
    interval_type = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(max_length=60)
    args = models.TextField(blank=True)
    numbercall = models.IntegerField(blank=True, null=True)
    nextcall = models.DateTimeField()
    priority = models.IntegerField(blank=True, null=True)
    doall = models.NullBooleanField()
    active = models.NullBooleanField()
    interval_number = models.IntegerField(blank=True, null=True)
    model = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_cron'

class IrDefault(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    uid = models.ForeignKey('ResUsers', db_column='uid', blank=True, null=True)
    ref_table = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    value = models.CharField(max_length=64, blank=True)
    ref_id = models.IntegerField(blank=True, null=True)
    field_tbl = models.CharField(max_length=64, blank=True)
    field_name = models.CharField(max_length=64, blank=True)
    page = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_default'

class IrExports(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    resource = models.CharField(max_length=128, blank=True)
    name = models.CharField(max_length=128, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_exports'

class IrExportsLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    export = models.ForeignKey(IrExports, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_exports_line'

class IrFieldsConverter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_fields_converter'

class IrFilters(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    is_default = models.NullBooleanField()
    model_id = models.CharField(max_length=-1)
    domain = models.TextField()
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=64)
    context = models.TextField()
    class Meta:
        managed = False
        db_table = 'ir_filters'

class IrMailServer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    smtp_port = models.IntegerField()
    smtp_host = models.CharField(max_length=128)
    smtp_user = models.CharField(max_length=64, blank=True)
    smtp_pass = models.CharField(max_length=64, blank=True)
    smtp_debug = models.NullBooleanField()
    active = models.NullBooleanField()
    smtp_encryption = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'ir_mail_server'

class IrModel(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(unique=True, max_length=64)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=16, blank=True)
    info = models.TextField(blank=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_model'

class IrModelAccess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(IrModel)
    perm_read = models.NullBooleanField()
    name = models.CharField(max_length=64)
    perm_write = models.NullBooleanField()
    perm_unlink = models.NullBooleanField()
    active = models.NullBooleanField()
    perm_create = models.NullBooleanField()
    group = models.ForeignKey('ResGroups', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_model_access'

class IrModelConstraint(models.Model):
    id = models.IntegerField()
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.ForeignKey('IrModuleModule', db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    type = models.CharField(max_length=1)
    name = models.CharField(max_length=128)
    class Meta:
        managed = False
        db_table = 'ir_model_constraint'

class IrModelData(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    noupdate = models.NullBooleanField()
    name = models.CharField(max_length=128)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.CharField(max_length=64)
    model = models.CharField(max_length=64)
    res_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_model_data'

class IrModelFields(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(max_length=64)
    model_0 = models.ForeignKey(IrModel, db_column='model_id') # Field renamed because of name conflict.
    name = models.CharField(max_length=64)
    relation = models.CharField(max_length=64, blank=True)
    select_level = models.CharField(max_length=4)
    field_description = models.CharField(max_length=256)
    ttype = models.CharField(max_length=64)
    state = models.CharField(max_length=64)
    view_load = models.NullBooleanField()
    relate = models.NullBooleanField()
    relation_field = models.CharField(max_length=128, blank=True)
    translate = models.NullBooleanField()
    serialization_field = models.ForeignKey('self', blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    domain = models.CharField(max_length=256, blank=True)
    selection = models.CharField(max_length=128, blank=True)
    on_delete = models.CharField(max_length=-1, blank=True)
    selectable = models.NullBooleanField()
    size = models.IntegerField(blank=True, null=True)
    required = models.NullBooleanField()
    readonly = models.NullBooleanField()
    complete_name = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_model_fields'

class IrModelFieldsGroupRel(models.Model):
    field = models.ForeignKey(IrModelFields)
    group = models.ForeignKey('ResGroups')
    class Meta:
        managed = False
        db_table = 'ir_model_fields_group_rel'

class IrModelRelation(models.Model):
    id = models.IntegerField()
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.ForeignKey('IrModuleModule', db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    name = models.CharField(max_length=128)
    class Meta:
        managed = False
        db_table = 'ir_model_relation'

class IrModuleCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=128)
    sequence = models.IntegerField(blank=True, null=True)
    visible = models.NullBooleanField()
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'ir_module_category'

class IrModuleModule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    website = models.CharField(max_length=256, blank=True)
    summary = models.CharField(max_length=256, blank=True)
    name = models.CharField(unique=True, max_length=128)
    author = models.CharField(max_length=128, blank=True)
    url = models.CharField(max_length=128, blank=True)
    state = models.CharField(max_length=16, blank=True)
    latest_version = models.CharField(max_length=64, blank=True)
    shortdesc = models.CharField(max_length=256, blank=True)
    complexity = models.CharField(max_length=32, blank=True)
    category = models.ForeignKey(IrModuleCategory, blank=True, null=True)
    description = models.TextField(blank=True)
    application = models.NullBooleanField()
    demo = models.NullBooleanField()
    web = models.NullBooleanField()
    license = models.CharField(max_length=32, blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    auto_install = models.NullBooleanField()
    menus_by_module = models.TextField(blank=True)
    maintainer = models.CharField(max_length=128, blank=True)
    contributors = models.TextField(blank=True)
    views_by_module = models.TextField(blank=True)
    icon = models.CharField(max_length=128, blank=True)
    reports_by_module = models.TextField(blank=True)
    published_version = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_module_module'

class IrModuleModuleDependency(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=128, blank=True)
    version_pattern = models.CharField(max_length=128, blank=True)
    module = models.ForeignKey(IrModuleModule, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_module_module_dependency'

class IrProperty(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value_text = models.TextField(blank=True)
    value_float = models.FloatField(blank=True, null=True)
    name = models.CharField(max_length=128, blank=True)
    value_integer = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    fields = models.ForeignKey(IrModelFields)
    value_datetime = models.DateTimeField(blank=True, null=True)
    value_binary = models.BinaryField(blank=True, null=True)
    value_reference = models.CharField(max_length=128, blank=True)
    res_id = models.CharField(max_length=128, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_property'

class IrRule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(IrModel)
    domain_force = models.TextField(blank=True)
    name = models.CharField(max_length=128, blank=True)
    global_field = models.NullBooleanField(db_column='global') # Field renamed because it was a Python reserved word.
    active = models.NullBooleanField()
    perm_unlink = models.NullBooleanField()
    perm_write = models.NullBooleanField()
    perm_read = models.NullBooleanField()
    perm_create = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'ir_rule'

class IrSequence(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=64, blank=True)
    suffix = models.CharField(max_length=64, blank=True)
    number_next = models.IntegerField()
    number_increment = models.IntegerField()
    implementation = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    padding = models.IntegerField()
    active = models.NullBooleanField()
    prefix = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'ir_sequence'

class IrSequenceType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(unique=True, max_length=32)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'ir_sequence_type'

class IrServerObjectLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    server = models.ForeignKey(IrActServer, blank=True, null=True)
    type = models.CharField(max_length=32)
    value = models.TextField()
    col1 = models.ForeignKey(IrModelFields, db_column='col1')
    class Meta:
        managed = False
        db_table = 'ir_server_object_lines'

class IrTranslation(models.Model):
    id = models.IntegerField(primary_key=True)
    lang = models.ForeignKey('ResLang', db_column='lang', blank=True, null=True)
    src = models.TextField(blank=True)
    name = models.CharField(max_length=-1)
    res_id = models.IntegerField(blank=True, null=True)
    module = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    value = models.TextField(blank=True)
    type = models.CharField(max_length=-1, blank=True)
    comments = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'ir_translation'

class IrUiMenu(models.Model):
    id = models.IntegerField(primary_key=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=64)
    icon = models.CharField(max_length=64, blank=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    web_icon_data = models.BinaryField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    web_icon_hover = models.CharField(max_length=128, blank=True)
    web_icon_hover_data = models.BinaryField(blank=True, null=True)
    needaction_enabled = models.NullBooleanField()
    web_icon = models.CharField(max_length=128, blank=True)
    mail_group = models.ForeignKey('MailGroup', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_ui_menu'

class IrUiMenuGroupRel(models.Model):
    menu = models.ForeignKey(IrUiMenu)
    gid = models.ForeignKey('ResGroups', db_column='gid')
    class Meta:
        managed = False
        db_table = 'ir_ui_menu_group_rel'

class IrUiView(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    arch = models.TextField()
    field_parent = models.CharField(max_length=64, blank=True)
    priority = models.IntegerField()
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    inherit = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'ir_ui_view'

class IrUiViewCustom(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    arch = models.TextField()
    ref = models.ForeignKey(IrUiView)
    class Meta:
        managed = False
        db_table = 'ir_ui_view_custom'

class IrUiViewGroupRel(models.Model):
    view = models.ForeignKey(IrUiView)
    group = models.ForeignKey('ResGroups')
    class Meta:
        managed = False
        db_table = 'ir_ui_view_group_rel'

class IrUiViewSc(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    res_id = models.IntegerField(blank=True, null=True)
    resource = models.CharField(max_length=64)
    name = models.CharField(max_length=64, blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_ui_view_sc'

class IrValues(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128)
    key = models.CharField(max_length=128)
    key2 = models.CharField(max_length=256, blank=True)
    model = models.CharField(max_length=128)
    value = models.TextField(blank=True)
    meta = models.TextField(blank=True)
    res_id = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model_0 = models.ForeignKey(IrModel, db_column='model_id', blank=True, null=True) # Field renamed because of name conflict.
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    action_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'ir_values'

class LedgerJournalRel(models.Model):
    ledger = models.ForeignKey(AccountAnalyticCostLedgerJournalReport)
    journal = models.ForeignKey(AccountAnalyticJournal)
    class Meta:
        managed = False
        db_table = 'ledger_journal_rel'

class LinePayRel(models.Model):
    pay = models.ForeignKey('PaymentOrderCreate')
    line = models.ForeignKey(AccountMoveLine)
    class Meta:
        managed = False
        db_table = 'line_pay_rel'

class MailAlias(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    alias_model = models.ForeignKey(IrModel)
    alias_defaults = models.TextField()
    alias_force_thread_id = models.IntegerField(blank=True, null=True)
    alias_name = models.CharField(unique=True, max_length=-1)
    alias_user = models.ForeignKey('ResUsers', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mail_alias'

class MailComposeMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True)
    model = models.CharField(max_length=128, blank=True)
    record_name = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField(blank=True, null=True)
    subject = models.CharField(max_length=-1, blank=True)
    composition_mode = models.CharField(max_length=-1, blank=True)
    message_id = models.CharField(max_length=-1, blank=True)
    parent = models.ForeignKey('MailMessage', blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    subtype = models.ForeignKey('MailMessageSubtype', blank=True, null=True)
    filter = models.ForeignKey(IrFilters, blank=True, null=True)
    author = models.ForeignKey('ResPartner', blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    template_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mail_compose_message'

class MailComposeMessageIrAttachmentsRel(models.Model):
    wizard = models.ForeignKey(MailComposeMessage)
    attachment = models.ForeignKey(IrAttachment)
    class Meta:
        managed = False
        db_table = 'mail_compose_message_ir_attachments_rel'

class MailComposeMessageResPartnerRel(models.Model):
    wizard = models.ForeignKey(MailComposeMessage)
    partner = models.ForeignKey('ResPartner')
    class Meta:
        managed = False
        db_table = 'mail_compose_message_res_partner_rel'

class MailFollowers(models.Model):
    id = models.IntegerField(primary_key=True)
    res_model = models.CharField(max_length=128)
    res_id = models.IntegerField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner')
    class Meta:
        managed = False
        db_table = 'mail_followers'

class MailFollowersMailMessageSubtypeRel(models.Model):
    mail_followers = models.ForeignKey(MailFollowers)
    mail_message_subtype = models.ForeignKey('MailMessageSubtype')
    class Meta:
        managed = False
        db_table = 'mail_followers_mail_message_subtype_rel'

class MailGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    menu = models.ForeignKey(IrUiMenu)
    image_medium = models.BinaryField(blank=True, null=True)
    name = models.CharField(max_length=64)
    alias = models.ForeignKey(MailAlias)
    image = models.BinaryField(blank=True, null=True)
    image_small = models.BinaryField(blank=True, null=True)
    group_public = models.ForeignKey('ResGroups', blank=True, null=True)
    public = models.CharField(max_length=-1)
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'mail_group'

class MailGroupResGroupRel(models.Model):
    mail_group = models.ForeignKey(MailGroup)
    groups = models.ForeignKey('ResGroups')
    class Meta:
        managed = False
        db_table = 'mail_group_res_group_rel'

class MailMail(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    mail_message = models.ForeignKey('MailMessage')
    notification = models.NullBooleanField()
    auto_delete = models.NullBooleanField()
    body_html = models.TextField(blank=True)
    mail_server = models.ForeignKey(IrMailServer, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    references = models.TextField(blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_to = models.TextField(blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    fetchmail_server = models.ForeignKey(FetchmailServer, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mail_mail'

class MailMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True)
    model = models.CharField(max_length=128, blank=True)
    record_name = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField(blank=True, null=True)
    subject = models.CharField(max_length=-1, blank=True)
    message_id = models.CharField(max_length=-1, blank=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    subtype = models.ForeignKey('MailMessageSubtype', blank=True, null=True)
    author = models.ForeignKey('ResPartner', blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'mail_message'

class MailMessageResPartnerRel(models.Model):
    mail_message = models.ForeignKey(MailMessage)
    res_partner = models.ForeignKey('ResPartner')
    class Meta:
        managed = False
        db_table = 'mail_message_res_partner_rel'

class MailMessageSubtype(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=-1)
    relation_field = models.CharField(max_length=-1, blank=True)
    default = models.NullBooleanField()
    res_model = models.CharField(max_length=-1, blank=True)
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'mail_message_subtype'

class MailNotification(models.Model):
    id = models.IntegerField(primary_key=True)
    read = models.NullBooleanField()
    starred = models.NullBooleanField()
    partner = models.ForeignKey('ResPartner')
    message = models.ForeignKey(MailMessage)
    class Meta:
        managed = False
        db_table = 'mail_notification'

class MailVote(models.Model):
    message = models.ForeignKey(MailMessage)
    user = models.ForeignKey('ResUsers')
    class Meta:
        managed = False
        db_table = 'mail_vote'

class MailWizardInvite(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    res_model = models.CharField(max_length=128)
    res_id = models.IntegerField(blank=True, null=True)
    message = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'mail_wizard_invite'

class MailWizardInviteResPartnerRel(models.Model):
    mail_wizard_invite = models.ForeignKey(MailWizardInvite)
    res_partner = models.ForeignKey('ResPartner')
    class Meta:
        managed = False
        db_table = 'mail_wizard_invite_res_partner_rel'

class MakeProcurement(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    uom = models.ForeignKey('ProductUom')
    date_planned = models.DateField()
    qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product = models.ForeignKey('ProductProduct')
    warehouse = models.ForeignKey('StockWarehouse')
    class Meta:
        managed = False
        db_table = 'make_procurement'

class MessageAttachmentRel(models.Model):
    message = models.ForeignKey(MailMessage)
    attachment = models.ForeignKey(IrAttachment)
    class Meta:
        managed = False
        db_table = 'message_attachment_rel'

class MrpBom(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_stop = models.DateField(blank=True, null=True)
    code = models.CharField(max_length=16, blank=True)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    product_uos_qty = models.FloatField(blank=True, null=True)
    date_start = models.DateField(blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uos = models.ForeignKey('ProductUom', db_column='product_uos', blank=True, null=True)
    product_efficiency = models.FloatField()
    active = models.NullBooleanField()
    product_rounding = models.FloatField(blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    routing = models.ForeignKey('MrpRouting', blank=True, null=True)
    product = models.ForeignKey('ProductProduct')
    bom = models.ForeignKey('self', blank=True, null=True)
    position = models.CharField(max_length=64, blank=True)
    type = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'mrp_bom'

class MrpBomPropertyRel(models.Model):
    bom = models.ForeignKey(MrpBom)
    property = models.ForeignKey('MrpProperty')
    class Meta:
        managed = False
        db_table = 'mrp_bom_property_rel'

class MrpConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_mrp_byproduct = models.NullBooleanField()
    module_mrp_jit = models.NullBooleanField()
    group_mrp_properties = models.NullBooleanField()
    module_product_manufacturer = models.NullBooleanField()
    module_mrp_repair = models.NullBooleanField()
    module_mrp_operations = models.NullBooleanField()
    group_mrp_routings = models.NullBooleanField()
    module_stock_no_autopicking = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'mrp_config_settings'

class MrpProductPrice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    number = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'mrp_product_price'

class MrpProductProduce(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    mode = models.CharField(max_length=-1)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'mrp_product_produce'

class MrpProduction(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    product_uos_qty = models.FloatField(blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uos = models.ForeignKey('ProductUom', db_column='product_uos', blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    location_src = models.ForeignKey('StockLocation')
    cycle_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_start = models.DateTimeField(blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    priority = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    bom = models.ForeignKey(MrpBom, blank=True, null=True)
    date_finished = models.DateTimeField(blank=True, null=True)
    name = models.CharField(max_length=64)
    product = models.ForeignKey('ProductProduct')
    date_planned = models.DateTimeField()
    move_prod = models.ForeignKey('StockMove', blank=True, null=True)
    routing = models.ForeignKey('MrpRouting', blank=True, null=True)
    hour_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location_dest = models.ForeignKey('StockLocation')
    picking = models.ForeignKey('StockPicking', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_production'

class MrpProductionMoveIds(models.Model):
    production = models.ForeignKey(MrpProduction)
    move = models.ForeignKey('StockMove')
    class Meta:
        managed = False
        db_table = 'mrp_production_move_ids'

class MrpProductionProductLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    product_uos_qty = models.FloatField(blank=True, null=True)
    name = models.CharField(max_length=64)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uos = models.ForeignKey('ProductUom', db_column='product_uos', blank=True, null=True)
    production = models.ForeignKey(MrpProduction, blank=True, null=True)
    product = models.ForeignKey('ProductProduct')
    class Meta:
        managed = False
        db_table = 'mrp_production_product_line'

class MrpProductionWorkcenterLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField()
    hour = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    production = models.ForeignKey(MrpProduction)
    workcenter = models.ForeignKey('MrpWorkcenter')
    cycle = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_production_workcenter_line'

class MrpProperty(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    composition = models.CharField(max_length=-1)
    group = models.ForeignKey('MrpPropertyGroup')
    description = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'mrp_property'

class MrpPropertyGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'mrp_property_group'

class MrpRepair(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    address = models.ForeignKey('ResPartner', blank=True, null=True)
    internal_notes = models.TextField(blank=True)
    quotation_notes = models.TextField(blank=True)
    location = models.ForeignKey('StockLocation', blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    pricelist = models.ForeignKey('ProductPricelist', blank=True, null=True)
    invoiced = models.NullBooleanField()
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    partner_invoice = models.ForeignKey('ResPartner', blank=True, null=True)
    move = models.ForeignKey('StockMove')
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=24)
    invoice = models.ForeignKey(AccountInvoice, blank=True, null=True)
    deliver_bool = models.NullBooleanField()
    invoice_method = models.CharField(max_length=-1)
    product = models.ForeignKey('ProductProduct')
    location_dest = models.ForeignKey('StockLocation', blank=True, null=True)
    guarantee_limit = models.DateField()
    repaired = models.NullBooleanField()
    picking = models.ForeignKey('StockPicking', blank=True, null=True)
    broken_equipment = models.NullBooleanField()
    hour_use = models.IntegerField()
    equipment_complete = models.NullBooleanField()
    observations = models.TextField()
    equipment_manipulated = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'mrp_repair'

class MrpRepairCancel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_repair_cancel'

class MrpRepairFee(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    repair = models.ForeignKey(MrpRepair)
    price_unit = models.FloatField()
    product_uom_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    to_invoice = models.NullBooleanField()
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    invoice_line = models.ForeignKey(AccountInvoiceLine, blank=True, null=True)
    invoiced = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'mrp_repair_fee'

class MrpRepairLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    repair = models.ForeignKey(MrpRepair, blank=True, null=True)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uom_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    location = models.ForeignKey('StockLocation')
    move = models.ForeignKey('StockMove', blank=True, null=True)
    name = models.CharField(max_length=64)
    to_invoice = models.NullBooleanField()
    state = models.CharField(max_length=-1)
    product = models.ForeignKey('ProductProduct')
    location_dest = models.ForeignKey('StockLocation')
    invoiced = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    invoice_line = models.ForeignKey(AccountInvoiceLine, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_repair_line'

class MrpRepairMakeInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    group = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'mrp_repair_make_invoice'

class MrpRouting(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    code = models.CharField(max_length=8, blank=True)
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    location = models.ForeignKey('StockLocation', blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_routing'

class MrpRoutingWorkcenter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    cycle_nbr = models.FloatField()
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    note = models.TextField(blank=True)
    routing = models.ForeignKey(MrpRouting, blank=True, null=True)
    workcenter = models.ForeignKey('MrpWorkcenter')
    hour_nbr = models.FloatField()
    class Meta:
        managed = False
        db_table = 'mrp_routing_workcenter'

class MrpWorkcenter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    costs_cycle_account = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    capacity_per_cycle = models.FloatField(blank=True, null=True)
    time_start = models.FloatField(blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    resource = models.ForeignKey('ResourceResource')
    costs_journal = models.ForeignKey(AccountAnalyticJournal, blank=True, null=True)
    time_stop = models.FloatField(blank=True, null=True)
    note = models.TextField(blank=True)
    costs_hour = models.FloatField(blank=True, null=True)
    costs_hour_account = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    costs_cycle = models.FloatField(blank=True, null=True)
    costs_general_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    time_cycle = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'mrp_workcenter'

class MrpWorkcenterLoad(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    measure_unit = models.CharField(max_length=-1)
    time_unit = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'mrp_workcenter_load'

class MultiCompanyDefault(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    expression = models.CharField(max_length=256)
    company_dest = models.ForeignKey('ResCompany')
    field = models.ForeignKey(IrModelFields, blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    object = models.ForeignKey(IrModel)
    class Meta:
        managed = False
        db_table = 'multi_company_default'

class OsvMemoryAutovacuum(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'osv_memory_autovacuum'

class PartnerStatRel(models.Model):
    osv_memory = models.ForeignKey(AccountFollowupPrint)
    partner_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'partner_stat_rel'

class PaymentLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_statement_line = models.ForeignKey(AccountBankStatementLine, blank=True, null=True)
    order = models.ForeignKey('PaymentOrder')
    communication = models.CharField(max_length=64)
    company_id = models.IntegerField(blank=True, null=True)
    currency = models.ForeignKey('ResCurrency', db_column='currency')
    date = models.DateField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner')
    company_currency = models.ForeignKey('ResCurrency', db_column='company_currency', blank=True, null=True)
    name = models.CharField(unique=True, max_length=64)
    move_line = models.ForeignKey(AccountMoveLine, blank=True, null=True)
    bank = models.ForeignKey('ResPartnerBank', blank=True, null=True)
    communication2 = models.CharField(max_length=64, blank=True)
    state = models.CharField(max_length=-1)
    amount_currency = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'payment_line'

class PaymentLineRel(models.Model):
    payment = models.ForeignKey(AccountPaymentPopulateStatement)
    line = models.ForeignKey(PaymentLine)
    class Meta:
        managed = False
        db_table = 'payment_line_rel_'

class PaymentMode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    journal = models.ForeignKey(AccountJournal, db_column='journal')
    partner_id = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    bank = models.ForeignKey('ResPartnerBank')
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'payment_mode'

class PaymentOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_prefered = models.CharField(max_length=-1)
    user = models.ForeignKey('ResUsers')
    date_done = models.DateField(blank=True, null=True)
    reference = models.CharField(max_length=128)
    company_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    mode = models.ForeignKey(PaymentMode, db_column='mode')
    date_created = models.DateField(blank=True, null=True)
    date_scheduled = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'payment_order'

class PaymentOrderCreate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    duedate = models.DateField()
    class Meta:
        managed = False
        db_table = 'payment_order_create'

class PortalPaymentAcquirer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    visible = models.NullBooleanField()
    name = models.CharField(max_length=-1)
    form_template = models.TextField()
    class Meta:
        managed = False
        db_table = 'portal_payment_acquirer'

class PortalWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    portal = models.ForeignKey('ResGroups')
    welcome_message = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'portal_wizard'

class PortalWizardUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    in_portal = models.NullBooleanField()
    partner = models.ForeignKey('ResPartner')
    email = models.CharField(max_length=240, blank=True)
    wizard = models.ForeignKey(PortalWizard)
    class Meta:
        managed = False
        db_table = 'portal_wizard_user'

class PosBoxEntries(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    product_id = models.IntegerField()
    ref = models.CharField(max_length=32, blank=True)
    journal = models.ForeignKey(AccountJournal)
    session = models.ForeignKey('PosSession', blank=True, null=True)
    name = models.CharField(max_length=32)
    class Meta:
        managed = False
        db_table = 'pos_box_entries'

class PosCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    image_medium = models.BinaryField(blank=True, null=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    image = models.BinaryField(blank=True, null=True)
    image_small = models.BinaryField(blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_category'

class PosConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    iface_vkeyboard = models.NullBooleanField()
    iface_cashdrawer = models.NullBooleanField()
    name = models.CharField(max_length=32)
    state = models.CharField(max_length=-1)
    journal = models.ForeignKey(AccountJournal, blank=True, null=True)
    iface_self_checkout = models.NullBooleanField()
    iface_electronic_scale = models.NullBooleanField()
    shop = models.ForeignKey('SaleShop')
    group_by = models.NullBooleanField()
    iface_payment_terminal = models.NullBooleanField()
    sequence = models.ForeignKey(IrSequence, blank=True, null=True)
    iface_print_via_proxy = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'pos_config'

class PosConfigJournalRel(models.Model):
    pos_config = models.ForeignKey(PosConfig)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'pos_config_journal_rel'

class PosConfirm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_confirm'

class PosDetails(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_end = models.DateField()
    date_start = models.DateField()
    class Meta:
        managed = False
        db_table = 'pos_details'

class PosDetailsReportUserRel(models.Model):
    user = models.ForeignKey(PosDetails)
    wizard = models.ForeignKey('ResUsers')
    class Meta:
        managed = False
        db_table = 'pos_details_report_user_rel'

class PosDiscount(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    discount = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'pos_discount'

class PosEanWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    ean13_pattern = models.CharField(max_length=32)
    class Meta:
        managed = False
        db_table = 'pos_ean_wizard'

class PosMakePayment(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    payment_date = models.DateField()
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    payment_name = models.CharField(max_length=32, blank=True)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'pos_make_payment'

class PosOpenStatement(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_open_statement'

class PosOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    sale_journal = models.IntegerField(blank=True, null=True)
    pos_reference = models.CharField(max_length=64, blank=True)
    account_move = models.ForeignKey(AccountMove, db_column='account_move', blank=True, null=True)
    date_order = models.DateTimeField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    nb_print = models.IntegerField(blank=True, null=True)
    note = models.TextField(blank=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    invoice = models.ForeignKey(AccountInvoice, blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    session = models.ForeignKey('PosSession', blank=True, null=True)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1, blank=True)
    shop_id = models.IntegerField(blank=True, null=True)
    pricelist = models.ForeignKey('ProductPricelist')
    picking = models.ForeignKey('StockPicking', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_order'

class PosOrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    notice = models.CharField(max_length=128, blank=True)
    product = models.ForeignKey('ProductProduct')
    order = models.ForeignKey(PosOrder, blank=True, null=True)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_subtotal = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    price_subtotal_incl = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=32)
    prodlot_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_order_line'

class PosPaymentReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_payment_report'

class PosPaymentReportUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_payment_report_user'

class PosReceipt(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_receipt'

class PosSaleUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_end = models.DateField()
    date_start = models.DateField()
    class Meta:
        managed = False
        db_table = 'pos_sale_user'

class PosSalesUserToday(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'pos_sales_user_today'

class PosSession(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    config = models.ForeignKey(PosConfig)
    cash_journal_id = models.IntegerField(blank=True, null=True)
    start_at = models.DateTimeField(blank=True, null=True)
    cash_register_id = models.IntegerField(blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(unique=True, max_length=32)
    stop_at = models.DateTimeField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'pos_session'

class PosSessionOpening(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    pos_config = models.ForeignKey(PosConfig)
    pos_state_str = models.CharField(max_length=32, blank=True)
    pos_session = models.ForeignKey(PosSession, blank=True, null=True)
    show_config = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'pos_session_opening'

class PricelistPartnerinfo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    min_quantity = models.FloatField()
    price = models.DecimalField(max_digits=65535, decimal_places=65535)
    suppinfo = models.ForeignKey('ProductSupplierinfo')
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'pricelist_partnerinfo'

class ProcessCondition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(IrModel, blank=True, null=True)
    node = models.ForeignKey('ProcessNode')
    model_states = models.CharField(max_length=128)
    name = models.CharField(max_length=30)
    class Meta:
        managed = False
        db_table = 'process_condition'

class ProcessNode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    menu = models.ForeignKey(IrUiMenu, blank=True, null=True)
    model = models.ForeignKey(IrModel, blank=True, null=True)
    kind = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=30)
    subflow = models.ForeignKey('ProcessProcess', blank=True, null=True)
    process = models.ForeignKey('ProcessProcess')
    model_states = models.CharField(max_length=128, blank=True)
    help_url = models.CharField(max_length=255, blank=True)
    flow_start = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'process_node'

class ProcessProcess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    model = models.ForeignKey(IrModel, blank=True, null=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=30)
    class Meta:
        managed = False
        db_table = 'process_process'

class ProcessTransition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=32)
    source_node = models.ForeignKey(ProcessNode)
    target_node = models.ForeignKey(ProcessNode)
    class Meta:
        managed = False
        db_table = 'process_transition'

class ProcessTransitionAction(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    action = models.CharField(max_length=64, blank=True)
    state = models.CharField(max_length=-1)
    name = models.CharField(max_length=32)
    transition = models.ForeignKey(ProcessTransition)
    class Meta:
        managed = False
        db_table = 'process_transition_action'

class ProcessTransitionGroupRel(models.Model):
    tid = models.ForeignKey(ProcessTransition, db_column='tid')
    rid = models.ForeignKey('ResGroups', db_column='rid')
    class Meta:
        managed = False
        db_table = 'process_transition_group_rel'

class ProcessTransitionIds(models.Model):
    ptr = models.ForeignKey(ProcessTransition)
    wtr = models.ForeignKey('WkfTransition')
    class Meta:
        managed = False
        db_table = 'process_transition_ids'

class ProcurementOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    product_uom = models.ForeignKey('ProductUom', db_column='product_uom')
    product_uos_qty = models.FloatField(blank=True, null=True)
    procure_method = models.CharField(max_length=-1)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uos = models.ForeignKey('ProductUom', db_column='product_uos', blank=True, null=True)
    message = models.CharField(max_length=124, blank=True)
    location = models.ForeignKey('StockLocation')
    move = models.ForeignKey('StockMove', blank=True, null=True)
    note = models.TextField(blank=True)
    name = models.TextField()
    date_planned = models.DateTimeField()
    close_move = models.NullBooleanField()
    company = models.ForeignKey('ResCompany')
    date_close = models.DateTimeField(blank=True, null=True)
    priority = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1)
    product = models.ForeignKey('ProductProduct')
    purchase = models.ForeignKey('PurchaseOrder', blank=True, null=True)
    production = models.ForeignKey(MrpProduction, blank=True, null=True)
    bom = models.ForeignKey(MrpBom, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'procurement_order'

class ProcurementOrderCompute(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'procurement_order_compute'

class ProcurementOrderComputeAll(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    automatic = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'procurement_order_compute_all'

class ProcurementOrderpointCompute(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    automatic = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'procurement_orderpoint_compute'

class ProcurementPropertyRel(models.Model):
    procurement = models.ForeignKey(ProcurementOrder)
    property = models.ForeignKey(MrpProperty)
    class Meta:
        managed = False
        db_table = 'procurement_property_rel'

class ProductCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'product_category'

class ProductPackaging(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    ul = models.ForeignKey('ProductUl', db_column='ul')
    code = models.CharField(max_length=14, blank=True)
    product = models.ForeignKey('ProductProduct')
    weight = models.FloatField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    ul_qty = models.IntegerField(blank=True, null=True)
    ean = models.CharField(max_length=14, blank=True)
    qty = models.FloatField(blank=True, null=True)
    width = models.FloatField(blank=True, null=True)
    length = models.FloatField(blank=True, null=True)
    rows = models.IntegerField()
    height = models.FloatField(blank=True, null=True)
    weight_ul = models.FloatField(blank=True, null=True)
    name = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'product_packaging'

class ProductPriceList(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    qty1 = models.IntegerField(blank=True, null=True)
    qty2 = models.IntegerField(blank=True, null=True)
    qty3 = models.IntegerField(blank=True, null=True)
    qty4 = models.IntegerField(blank=True, null=True)
    qty5 = models.IntegerField(blank=True, null=True)
    price_list = models.ForeignKey('ProductPricelist', db_column='price_list')
    class Meta:
        managed = False
        db_table = 'product_price_list'

class ProductPriceType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    field = models.CharField(max_length=32)
    currency = models.ForeignKey('ResCurrency')
    name = models.CharField(max_length=32)
    class Meta:
        managed = False
        db_table = 'product_price_type'

class ProductPricelist(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    currency = models.ForeignKey('ResCurrency')
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'product_pricelist'

class ProductPricelistItem(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    price_round = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    base_pricelist = models.ForeignKey(ProductPricelist, blank=True, null=True)
    sequence = models.IntegerField()
    price_max_margin = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    product_tmpl = models.ForeignKey('ProductTemplate', blank=True, null=True)
    product = models.ForeignKey('ProductProduct', blank=True, null=True)
    base = models.IntegerField()
    price_version = models.ForeignKey('ProductPricelistVersion')
    min_quantity = models.IntegerField()
    price_min_margin = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    categ = models.ForeignKey(ProductCategory, blank=True, null=True)
    price_surcharge = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'product_pricelist_item'

class ProductPricelistType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    key = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'product_pricelist_type'

class ProductPricelistVersion(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    active = models.NullBooleanField()
    pricelist = models.ForeignKey(ProductPricelist)
    date_end = models.DateField(blank=True, null=True)
    date_start = models.DateField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'product_pricelist_version'

class ProductProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    ean13 = models.CharField(max_length=13, blank=True)
    color = models.IntegerField(blank=True, null=True)
    image = models.BinaryField(blank=True, null=True)
    price_extra = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    default_code = models.CharField(max_length=64, blank=True)
    name_template = models.CharField(max_length=128, blank=True)
    active = models.NullBooleanField()
    variants = models.CharField(max_length=64, blank=True)
    image_medium = models.BinaryField(blank=True, null=True)
    image_small = models.BinaryField(blank=True, null=True)
    product_tmpl = models.ForeignKey('ProductTemplate')
    price_margin = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    track_outgoing = models.NullBooleanField()
    track_incoming = models.NullBooleanField()
    valuation = models.CharField(max_length=-1)
    track_production = models.NullBooleanField()
    expense_pdt = models.NullBooleanField()
    income_pdt = models.NullBooleanField()
    available_in_pos = models.NullBooleanField()
    pos_categ_id = models.IntegerField(blank=True, null=True)
    to_weight = models.NullBooleanField()
    lot_split_type = models.CharField(max_length=-1)
    track_internal = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'product_product'

class ProductSupplierTaxesRel(models.Model):
    prod = models.ForeignKey('ProductTemplate')
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'product_supplier_taxes_rel'

class ProductSupplierinfo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.ForeignKey('ResPartner', db_column='name')
    sequence = models.IntegerField(blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    delay = models.IntegerField()
    min_qty = models.FloatField()
    product_code = models.CharField(max_length=64, blank=True)
    product_name = models.CharField(max_length=128, blank=True)
    product = models.ForeignKey('ProductTemplate')
    class Meta:
        managed = False
        db_table = 'product_supplierinfo'

class ProductTaxesRel(models.Model):
    prod = models.ForeignKey('ProductTemplate')
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'product_taxes_rel'

class ProductTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    warranty = models.FloatField(blank=True, null=True)
    uos = models.ForeignKey('ProductUom', blank=True, null=True)
    list_price = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    description = models.TextField(blank=True)
    weight = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    weight_net = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    standard_price = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    mes_type = models.CharField(max_length=-1, blank=True)
    uom = models.ForeignKey('ProductUom')
    description_purchase = models.TextField(blank=True)
    cost_method = models.CharField(max_length=-1)
    categ = models.ForeignKey(ProductCategory)
    name = models.CharField(max_length=128)
    uos_coeff = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    volume = models.FloatField(blank=True, null=True)
    sale_ok = models.NullBooleanField()
    description_sale = models.TextField(blank=True)
    product_manager = models.ForeignKey('ResUsers', db_column='product_manager', blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    produce_delay = models.FloatField(blank=True, null=True)
    uom_po = models.ForeignKey('ProductUom')
    rental = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    loc_rack = models.CharField(max_length=16, blank=True)
    loc_row = models.CharField(max_length=16, blank=True)
    sale_delay = models.FloatField(blank=True, null=True)
    loc_case = models.CharField(max_length=16, blank=True)
    supply_method = models.CharField(max_length=-1)
    procure_method = models.CharField(max_length=-1)
    purchase_ok = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'product_template'

class ProductUl(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    type = models.CharField(max_length=-1)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'product_ul'

class ProductUom(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    uom_type = models.CharField(max_length=-1)
    category = models.ForeignKey('ProductUomCateg')
    name = models.CharField(max_length=64)
    rounding = models.DecimalField(max_digits=65535, decimal_places=65535)
    factor = models.DecimalField(max_digits=65535, decimal_places=65535)
    active = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'product_uom'

class ProductUomCateg(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'product_uom_categ'

class ProjectAccountAnalyticLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    from_date = models.DateField(blank=True, null=True)
    to_date = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_account_analytic_line'

class ProjectCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'project_category'

class ProjectCategoryProjectTaskRel(models.Model):
    project_task = models.ForeignKey('ProjectTask')
    project_category = models.ForeignKey(ProjectCategory)
    class Meta:
        managed = False
        db_table = 'project_category_project_task_rel'

class ProjectConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    group_manage_delegation_task = models.NullBooleanField()
    module_pad = models.NullBooleanField()
    module_project_mrp = models.NullBooleanField()
    module_project_issue_sheet = models.NullBooleanField()
    group_tasks_work_on_tasks = models.NullBooleanField()
    module_project_long_term = models.NullBooleanField()
    time_unit = models.ForeignKey(ProductUom, db_column='time_unit')
    module_project_issue = models.NullBooleanField()
    group_time_work_estimation_tasks = models.NullBooleanField()
    module_project_timesheet = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'project_config_settings'

class ProjectProject(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    alias_model = models.CharField(max_length=-1)
    color = models.IntegerField(blank=True, null=True)
    alias = models.ForeignKey(MailAlias)
    active = models.NullBooleanField()
    effective_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    planned_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    privacy_visibility = models.CharField(max_length=-1)
    analytic_account = models.ForeignKey(AccountAnalyticAccount)
    sequence = models.IntegerField(blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)
    total_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1)
    resource_calendar = models.ForeignKey('ResourceCalendar', blank=True, null=True)
    progress_rate = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_project'

class ProjectTask(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    color = models.IntegerField(blank=True, null=True)
    date_end = models.DateTimeField(blank=True, null=True)
    effective_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    planned_hours = models.FloatField(blank=True, null=True)
    partner = models.ForeignKey('ResPartner', blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    date_start = models.DateTimeField(blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    priority = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    progress = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    project = models.ForeignKey(ProjectProject, blank=True, null=True)
    description = models.TextField(blank=True)
    kanban_state = models.CharField(max_length=-1, blank=True)
    active = models.NullBooleanField()
    delay_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    stage = models.ForeignKey('ProjectTaskType', blank=True, null=True)
    name = models.CharField(max_length=128)
    date_deadline = models.DateField(blank=True, null=True)
    notes = models.TextField(blank=True)
    total_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    remaining_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_task'

class ProjectTaskDelegate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    planned_hours = models.FloatField(blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1, blank=True)
    project = models.ForeignKey(ProjectProject, blank=True, null=True)
    prefix = models.CharField(max_length=64, blank=True)
    planned_hours_me = models.FloatField(blank=True, null=True)
    new_task_description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'project_task_delegate'

class ProjectTaskHistory(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    task = models.ForeignKey(ProjectTask)
    end_date = models.DateField(blank=True, null=True)
    type = models.ForeignKey('ProjectTaskType', blank=True, null=True)
    kanban_state = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    date = models.DateField(blank=True, null=True)
    planned_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    remaining_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_task_history'

class ProjectTaskHistoryCumulative(models.Model):
    id = models.TextField(blank=True)
    end_date = models.DateField(blank=True, null=True)
    history_id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    task_id = models.IntegerField(blank=True, null=True)
    type_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    kanban_state = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    remaining_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    planned_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    project_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_task_history_cumulative'

class ProjectTaskParentRel(models.Model):
    parent = models.ForeignKey(ProjectTask)
    task = models.ForeignKey(ProjectTask)
    class Meta:
        managed = False
        db_table = 'project_task_parent_rel'

class ProjectTaskReevaluate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    remaining_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_task_reevaluate'

class ProjectTaskType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    fold = models.NullBooleanField()
    case_default = models.NullBooleanField()
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'project_task_type'

class ProjectTaskTypeRel(models.Model):
    type = models.ForeignKey(ProjectTaskType)
    project = models.ForeignKey(ProjectProject)
    class Meta:
        managed = False
        db_table = 'project_task_type_rel'

class ProjectTaskWork(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    hours = models.FloatField(blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(max_length=128, blank=True)
    task = models.ForeignKey(ProjectTask)
    date = models.DateTimeField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'project_task_work'

class ProjectUserRel(models.Model):
    project = models.ForeignKey(ProjectProject)
    uid = models.ForeignKey('ResUsers', db_column='uid')
    class Meta:
        managed = False
        db_table = 'project_user_rel'

class PublisherWarrantyContract(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'publisher_warranty_contract'

class PurchaseConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    group_uom = models.NullBooleanField()
    module_purchase_analytic_plans = models.NullBooleanField()
    group_costing_method = models.NullBooleanField()
    module_purchase_requisition = models.NullBooleanField()
    default_invoice_method = models.CharField(max_length=-1)
    module_purchase_double_validation = models.NullBooleanField()
    group_analytic_account_for_purchases = models.NullBooleanField()
    group_purchase_pricelist = models.NullBooleanField()
    module_warning = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'purchase_config_settings'

class PurchaseInvoiceRel(models.Model):
    purchase = models.ForeignKey('PurchaseOrder')
    invoice = models.ForeignKey(AccountInvoice)
    class Meta:
        managed = False
        db_table = 'purchase_invoice_rel'

class PurchaseOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    journal = models.ForeignKey(AccountJournal, blank=True, null=True)
    date_order = models.DateField()
    partner = models.ForeignKey('ResPartner')
    dest_address = models.ForeignKey('ResPartner', blank=True, null=True)
    fiscal_position = models.ForeignKey(AccountFiscalPosition, db_column='fiscal_position', blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location = models.ForeignKey('StockLocation')
    company = models.ForeignKey('ResCompany')
    amount_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    pricelist = models.ForeignKey(ProductPricelist)
    warehouse = models.ForeignKey('StockWarehouse', blank=True, null=True)
    payment_term = models.ForeignKey(AccountPaymentTerm, blank=True, null=True)
    partner_ref = models.CharField(max_length=64, blank=True)
    date_approve = models.DateField(blank=True, null=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.CharField(max_length=64)
    notes = models.TextField(blank=True)
    invoice_method = models.CharField(max_length=-1)
    shipped = models.NullBooleanField()
    validator = models.ForeignKey('ResUsers', db_column='validator', blank=True, null=True)
    minimum_planned_date = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'purchase_order'

class PurchaseOrderGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'purchase_order_group'

class PurchaseOrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    order = models.ForeignKey(PurchaseOrder)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    move_dest = models.ForeignKey('StockMove', blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    partner_id = models.IntegerField(blank=True, null=True)
    invoiced = models.NullBooleanField()
    name = models.TextField()
    date_planned = models.DateField()
    company_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    product = models.ForeignKey(ProductProduct, blank=True, null=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'purchase_order_line'

class PurchaseOrderLineInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'purchase_order_line_invoice'

class PurchaseOrderLineInvoiceRel(models.Model):
    order_line = models.ForeignKey(PurchaseOrderLine)
    invoice = models.ForeignKey(AccountInvoiceLine)
    class Meta:
        managed = False
        db_table = 'purchase_order_line_invoice_rel'

class PurchaseOrderTaxe(models.Model):
    ord = models.ForeignKey(PurchaseOrderLine)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'purchase_order_taxe'

class PurchaseReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    state = models.CharField(max_length=-1, blank=True)
    date_approve = models.DateField(blank=True, null=True)
    expected_date = models.DateField(blank=True, null=True)
    dest_address_id = models.IntegerField(blank=True, null=True)
    pricelist_id = models.IntegerField(blank=True, null=True)
    validator = models.IntegerField(blank=True, null=True)
    warehouse_id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    category_id = models.IntegerField(blank=True, null=True)
    product_uom = models.IntegerField(blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    delay = models.FloatField(blank=True, null=True)
    delay_pass = models.FloatField(blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    price_total = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    negociation = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    price_standard = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    price_average = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'purchase_report'

class ReconcileAccountRel(models.Model):
    reconcile = models.ForeignKey(AccountAutomaticReconcile)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        managed = False
        db_table = 'reconcile_account_rel'

class RelModulesLangexport(models.Model):
    wiz = models.ForeignKey(BaseLanguageExport)
    module = models.ForeignKey(IrModuleModule)
    class Meta:
        managed = False
        db_table = 'rel_modules_langexport'

class RelServerActions(models.Model):
    server = models.ForeignKey(IrActServer)
    action = models.ForeignKey(IrActServer)
    class Meta:
        managed = False
        db_table = 'rel_server_actions'

class RepairFeeLineTax(models.Model):
    repair_fee_line = models.ForeignKey(MrpRepairFee)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'repair_fee_line_tax'

class RepairOperationLineTax(models.Model):
    repair_operation_line = models.ForeignKey(MrpRepairLine)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'repair_operation_line_tax'

class ReportAccountReceivable(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.TextField(blank=True)
    balance = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    debit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    credit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        managed = False
        db_table = 'report_account_receivable'

class ReportAccountSales(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    period_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    account_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_account_sales'

class ReportAccountTypeSales(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    period_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    user_type = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_account_type_sales'

class ReportAgedReceivable(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'report_aged_receivable'

class ReportInvoiceCreated(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    number = models.CharField(max_length=64, blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    date_invoice = models.DateField(blank=True, null=True)
    date_due = models.DateField(blank=True, null=True)
    residual = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    origin = models.CharField(max_length=64, blank=True)
    create_date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_invoice_created'

class ReportMrpInout(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.TextField(blank=True)
    value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_mrp_inout'

class ReportPosOrder(models.Model):
    id = models.IntegerField(blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    total_discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    average_price = models.DecimalField(max_digits=16, decimal_places=2, blank=True, null=True)
    delay_validation = models.BigIntegerField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    user_id = models.IntegerField(blank=True, null=True)
    shop_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_pos_order'

class ReportProjectTaskUser(models.Model):
    nbr = models.IntegerField(blank=True, null=True)
    id = models.IntegerField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    date_start = models.DateTimeField(blank=True, null=True)
    date_end = models.DateTimeField(blank=True, null=True)
    date_deadline = models.DateField(blank=True, null=True)
    no_of_days = models.FloatField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    progress = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    project_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    hours_effective = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    priority = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=128, blank=True)
    company_id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    stage_id = models.IntegerField(blank=True, null=True)
    remaining_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    total_hours = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    hours_delay = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    hours_planned = models.FloatField(blank=True, null=True)
    closing_days = models.FloatField(blank=True, null=True)
    opening_days = models.FloatField(blank=True, null=True)
    delay_endings_days = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_project_task_user'

class ReportSalesByMarginPos(models.Model):
    id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    product_name = models.CharField(max_length=128, blank=True)
    date_order = models.TextField(blank=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    net_margin_per_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_sales_by_margin_pos'

class ReportSalesByMarginPosMonth(models.Model):
    id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    product_name = models.CharField(max_length=128, blank=True)
    date_order = models.TextField(blank=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    net_margin_per_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_sales_by_margin_pos_month'

class ReportSalesByUserPos(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date_order = models.TextField(blank=True)
    user_id = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_sales_by_user_pos'

class ReportSalesByUserPosMonth(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date_order = models.TextField(blank=True)
    user_id = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_sales_by_user_pos_month'

class ReportStockInventory(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    product_categ_id = models.IntegerField(blank=True, null=True)
    location_type = models.CharField(max_length=-1, blank=True)
    scrap_location = models.NullBooleanField()
    company_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    prodlot_id = models.IntegerField(blank=True, null=True)
    value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_stock_inventory'

class ReportStockLinesDate(models.Model):
    id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_stock_lines_date'

class ReportStockMove(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    day_diff = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    day_diff1 = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    day_diff2 = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    picking_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    location_dest_id = models.IntegerField(blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product_qty_out = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product_qty_in = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    product_uom = models.IntegerField(blank=True, null=True)
    categ_id = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    stock_journal = models.IntegerField(blank=True, null=True)
    value = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_stock_move'

class ReportTransactionPos(models.Model):
    id = models.IntegerField(blank=True, null=True)
    no_trans = models.BigIntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    disc = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_create = models.TextField(blank=True)
    user_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    jl_id = models.IntegerField(blank=True, null=True)
    invoice_id = models.BigIntegerField(blank=True, null=True)
    product_nb = models.BigIntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_transaction_pos'

class ReportWorkcenterLoad(models.Model):
    id = models.IntegerField(blank=True, null=True)
    name = models.TextField(blank=True)
    hour = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    cycle = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    workcenter_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_workcenter_load'

class Reportes(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    acc_field = models.CharField(db_column='acc_', max_length=-1, blank=True) # Field renamed because it ended with '_'.
    type_field = models.CharField(db_column='type_', max_length=-1, blank=True) # Field renamed because it ended with '_'.
    csv_file = models.BinaryField(blank=True, null=True)
    si = models.NullBooleanField()
    compania = models.ForeignKey('ResCompany', db_column='compania')
    export_filename = models.CharField(max_length=128, blank=True)
    class Meta:
        managed = False
        db_table = 'reportes'

class ResBank(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    city = models.CharField(max_length=128, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=128)
    zip = models.CharField(max_length=24, blank=True)
    country = models.ForeignKey('ResCountry', db_column='country', blank=True, null=True)
    street2 = models.CharField(max_length=128, blank=True)
    bic = models.CharField(max_length=64, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    state = models.ForeignKey('ResCountryState', db_column='state', blank=True, null=True)
    street = models.CharField(max_length=128, blank=True)
    active = models.NullBooleanField()
    email = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'res_bank'

class ResCompany(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=128)
    parent = models.ForeignKey('self', blank=True, null=True)
    partner = models.ForeignKey('ResPartner')
    currency = models.ForeignKey('ResCurrency')
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    rml_footer = models.TextField(blank=True)
    rml_header = models.TextField()
    paper_format = models.CharField(max_length=-1)
    logo_web = models.BinaryField(blank=True, null=True)
    rml_header2 = models.TextField()
    rml_header3 = models.TextField()
    rml_header1 = models.CharField(max_length=200, blank=True)
    account_no = models.CharField(max_length=64, blank=True)
    company_registry = models.CharField(max_length=64, blank=True)
    custom_footer = models.NullBooleanField()
    expects_chart_of_accounts = models.NullBooleanField()
    paypal_account = models.CharField(max_length=128, blank=True)
    overdue_msg = models.TextField(blank=True)
    tax_calculation_rounding_method = models.CharField(max_length=-1, blank=True)
    expense_currency_exchange_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    income_currency_exchange_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    vat_check_vies = models.NullBooleanField()
    project_time_mode_id = models.IntegerField(blank=True, null=True)
    schedule_range = models.FloatField()
    security_lead = models.FloatField()
    po_lead = models.FloatField()
    manufacturing_lead = models.ForeignKey(ProductUom, db_column='manufacturing_lead')
    is_group_invoice_line = models.NullBooleanField()
    autosplit_is_active = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'res_company'

class ResCompanyUsersRel(models.Model):
    cid = models.ForeignKey(ResCompany, db_column='cid')
    user = models.ForeignKey('ResUsers')
    class Meta:
        managed = False
        db_table = 'res_company_users_rel'

class ResConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_config'

class ResConfigInstaller(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_config_installer'

class ResConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_config_settings'

class ResCountry(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    address_format = models.TextField(blank=True)
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    code = models.CharField(unique=True, max_length=2, blank=True)
    name = models.CharField(unique=True, max_length=64)
    class Meta:
        managed = False
        db_table = 'res_country'

class ResCountryCommune(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    province = models.ForeignKey('ResCountryProvince', blank=True, null=True)
    code = models.CharField(max_length=1000, blank=True)
    name = models.CharField(max_length=100, blank=True)
    class Meta:
        managed = False
        db_table = 'res_country_commune'

class ResCountryProvince(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    state = models.ForeignKey('ResCountryState', blank=True, null=True)
    code = models.CharField(max_length=100, blank=True)
    name = models.CharField(max_length=100, blank=True)
    class Meta:
        managed = False
        db_table = 'res_country_province'

class ResCountryState(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=3)
    country = models.ForeignKey(ResCountry)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'res_country_state'

class ResCurrency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=32)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    rounding = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    symbol = models.CharField(max_length=4, blank=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    base = models.NullBooleanField()
    active = models.NullBooleanField()
    position = models.CharField(max_length=-1, blank=True)
    accuracy = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_currency'

class ResCurrencyRate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    currency = models.ForeignKey(ResCurrency, blank=True, null=True)
    rate = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.DateField()
    currency_rate_type = models.ForeignKey('ResCurrencyRateType', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_currency_rate'

class ResCurrencyRateType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'res_currency_rate_type'

class ResGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.TextField(blank=True)
    category = models.ForeignKey(IrModuleCategory, blank=True, null=True)
    share = models.NullBooleanField()
    is_portal = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'res_groups'

class ResGroupsActionRel(models.Model):
    uid = models.ForeignKey(IrActionsTodo, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        managed = False
        db_table = 'res_groups_action_rel'

class ResGroupsImpliedRel(models.Model):
    gid = models.ForeignKey(ResGroups, db_column='gid')
    hid = models.ForeignKey(ResGroups, db_column='hid')
    class Meta:
        managed = False
        db_table = 'res_groups_implied_rel'

class ResGroupsReportRel(models.Model):
    uid = models.ForeignKey(IrActReportXml, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        managed = False
        db_table = 'res_groups_report_rel'

class ResGroupsUsersRel(models.Model):
    uid = models.ForeignKey('ResUsers', db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        managed = False
        db_table = 'res_groups_users_rel'

class ResGroupsWizardRel(models.Model):
    uid = models.ForeignKey(IrActWizard, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        managed = False
        db_table = 'res_groups_wizard_rel'

class ResLang(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=64)
    code = models.CharField(unique=True, max_length=16)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_format = models.CharField(max_length=64)
    direction = models.CharField(max_length=-1)
    thousands_sep = models.CharField(max_length=64, blank=True)
    translatable = models.NullBooleanField()
    time_format = models.CharField(max_length=64)
    decimal_point = models.CharField(max_length=64)
    active = models.NullBooleanField()
    iso_code = models.CharField(max_length=16, blank=True)
    grouping = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'res_lang'

class ResPartner(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128)
    lang = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.TextField(blank=True)
    ean13 = models.CharField(max_length=13, blank=True)
    color = models.IntegerField(blank=True, null=True)
    image = models.BinaryField(blank=True, null=True)
    use_parent_address = models.NullBooleanField()
    active = models.NullBooleanField()
    street = models.CharField(max_length=128, blank=True)
    supplier = models.NullBooleanField()
    city_moved0 = models.CharField(max_length=128, blank=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    zip = models.CharField(max_length=24, blank=True)
    title = models.ForeignKey('ResPartnerTitle', db_column='title', blank=True, null=True)
    function = models.CharField(max_length=128, blank=True)
    country = models.ForeignKey(ResCountry, blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    employee = models.NullBooleanField()
    type = models.CharField(max_length=-1, blank=True)
    email = models.CharField(max_length=240, blank=True)
    vat = models.CharField(max_length=32, blank=True)
    website = models.CharField(max_length=64, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    street2 = models.CharField(max_length=128, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    credit_limit = models.FloatField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    tz = models.CharField(max_length=64, blank=True)
    customer = models.NullBooleanField()
    image_medium = models.BinaryField(blank=True, null=True)
    mobile = models.CharField(max_length=64, blank=True)
    ref = models.CharField(max_length=64, blank=True)
    image_small = models.BinaryField(blank=True, null=True)
    birthdate = models.CharField(max_length=64, blank=True)
    is_company = models.NullBooleanField()
    state = models.ForeignKey(ResCountryState, blank=True, null=True)
    notification_email_send = models.CharField(max_length=-1)
    opt_out = models.NullBooleanField()
    signup_type = models.CharField(max_length=-1, blank=True)
    signup_expiration = models.DateTimeField(blank=True, null=True)
    signup_token = models.CharField(max_length=-1, blank=True)
    last_reconciliation_date = models.DateTimeField(blank=True, null=True)
    debit_limit = models.FloatField(blank=True, null=True)
    display_name = models.CharField(max_length=-1, blank=True)
    payment_responsible = models.ForeignKey('ResUsers', blank=True, null=True)
    payment_next_action_date = models.DateField(blank=True, null=True)
    payment_next_action = models.TextField(blank=True)
    payment_note = models.TextField(blank=True)
    vat_subjected = models.NullBooleanField()
    city = models.IntegerField(blank=True, null=True)
    giro = models.CharField(max_length=30, blank=True)
    name_fantasy = models.CharField(max_length=30, blank=True)
    commune = models.IntegerField(blank=True, null=True)
    sub_distribuidor = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'res_partner'

class ResPartnerBank(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_name = models.CharField(max_length=32, blank=True)
    owner_name = models.CharField(max_length=128, blank=True)
    sequence = models.IntegerField(blank=True, null=True)
    street = models.CharField(max_length=128, blank=True)
    partner = models.ForeignKey(ResPartner)
    bank = models.ForeignKey(ResBank, db_column='bank', blank=True, null=True)
    bank_bic = models.CharField(max_length=16, blank=True)
    city = models.CharField(max_length=128, blank=True)
    name = models.CharField(max_length=64, blank=True)
    zip = models.CharField(max_length=24, blank=True)
    footer = models.NullBooleanField()
    country = models.ForeignKey(ResCountry, blank=True, null=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    state = models.CharField(max_length=-1)
    state_0 = models.ForeignKey(ResCountryState, db_column='state_id', blank=True, null=True) # Field renamed because of name conflict.
    acc_number = models.CharField(max_length=64)
    journal = models.ForeignKey(AccountJournal, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_partner_bank'

class ResPartnerBankType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    format_layout = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'res_partner_bank_type'

class ResPartnerBankTypeField(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_type = models.ForeignKey(ResPartnerBankType)
    readonly = models.NullBooleanField()
    required = models.NullBooleanField()
    name = models.CharField(max_length=64)
    size = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'res_partner_bank_type_field'

class ResPartnerCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    parent = models.ForeignKey('self', blank=True, null=True)
    active = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'res_partner_category'

class ResPartnerResPartnerCategoryRel(models.Model):
    category = models.ForeignKey(ResPartnerCategory)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        managed = False
        db_table = 'res_partner_res_partner_category_rel'

class ResPartnerTitle(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    domain = models.CharField(max_length=24)
    name = models.CharField(max_length=46)
    shortcut = models.CharField(max_length=16, blank=True)
    class Meta:
        managed = False
        db_table = 'res_partner_title'

class ResRequest(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True)
    name = models.CharField(max_length=128)
    date_sent = models.DateTimeField(blank=True, null=True)
    ref_doc2 = models.CharField(max_length=128, blank=True)
    priority = models.CharField(max_length=-1)
    ref_doc1 = models.CharField(max_length=128, blank=True)
    state = models.CharField(max_length=-1)
    act_from = models.ForeignKey('ResUsers', db_column='act_from')
    ref_partner = models.ForeignKey(ResPartner, blank=True, null=True)
    active = models.NullBooleanField()
    trigger_date = models.DateTimeField(blank=True, null=True)
    act_to = models.ForeignKey('ResUsers', db_column='act_to')
    class Meta:
        managed = False
        db_table = 'res_request'

class ResRequestHistory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True)
    act_from = models.ForeignKey('ResUsers', db_column='act_from')
    name = models.CharField(max_length=128)
    req = models.ForeignKey(ResRequest)
    date_sent = models.DateTimeField()
    act_to = models.ForeignKey('ResUsers', db_column='act_to')
    class Meta:
        managed = False
        db_table = 'res_request_history'

class ResRequestLink(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)
    object = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'res_request_link'

class ResUserSale(models.Model):
    user = models.ForeignKey(PosPaymentReportUser)
    sale = models.ForeignKey('ResUsers')
    class Meta:
        managed = False
        db_table = 'res_user_sale'

class ResUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    active = models.NullBooleanField()
    login = models.CharField(unique=True, max_length=64)
    password = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany)
    partner = models.ForeignKey(ResPartner)
    create_uid = models.ForeignKey('self', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('self', db_column='write_uid', blank=True, null=True)
    menu_id = models.IntegerField(blank=True, null=True)
    login_date = models.DateField(blank=True, null=True)
    signature = models.TextField(blank=True)
    action_id = models.IntegerField(blank=True, null=True)
    alias = models.ForeignKey(MailAlias)
    share = models.NullBooleanField()
    pos_config = models.IntegerField(blank=True, null=True)
    ean13 = models.CharField(max_length=13, blank=True)
    class Meta:
        managed = False
        db_table = 'res_users'

class ResourceCalendar(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    manager = models.ForeignKey(ResUsers, db_column='manager', blank=True, null=True)
    name = models.CharField(max_length=64)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'resource_calendar'

class ResourceCalendarAttendance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    dayofweek = models.CharField(max_length=-1)
    hour_from = models.FloatField()
    name = models.CharField(max_length=64)
    calendar = models.ForeignKey(ResourceCalendar)
    date_from = models.DateField(blank=True, null=True)
    hour_to = models.FloatField()
    class Meta:
        managed = False
        db_table = 'resource_calendar_attendance'

class ResourceCalendarLeaves(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    resource = models.ForeignKey('ResourceResource', blank=True, null=True)
    calendar = models.ForeignKey(ResourceCalendar, blank=True, null=True)
    date_from = models.DateTimeField()
    date_to = models.DateTimeField()
    company_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'resource_calendar_leaves'

class ResourceResource(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    time_efficiency = models.FloatField()
    code = models.CharField(max_length=16, blank=True)
    user = models.ForeignKey(ResUsers, blank=True, null=True)
    name = models.CharField(max_length=64)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    active = models.NullBooleanField()
    calendar = models.ForeignKey(ResourceCalendar, blank=True, null=True)
    resource_type = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'resource_resource'

class RuleGroupRel(models.Model):
    rule_group = models.ForeignKey(IrRule)
    group = models.ForeignKey(ResGroups)
    class Meta:
        managed = False
        db_table = 'rule_group_rel'

class SaleAdvancePaymentInv(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    advance_payment_method = models.CharField(max_length=-1)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product = models.ForeignKey(ProductProduct, blank=True, null=True)
    qtty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'sale_advance_payment_inv'

class SaleConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    module_sale = models.NullBooleanField()
    module_plugin_outlook = models.NullBooleanField()
    module_web_linkedin = models.NullBooleanField()
    module_plugin_thunderbird = models.NullBooleanField()
    module_crm = models.NullBooleanField()
    group_sale_pricelist = models.NullBooleanField()
    group_discount_per_so_line = models.NullBooleanField()
    timesheet = models.NullBooleanField()
    group_invoice_so_lines = models.NullBooleanField()
    module_sale_stock = models.NullBooleanField()
    time_unit = models.ForeignKey(ProductUom, db_column='time_unit', blank=True, null=True)
    module_account_analytic_analysis = models.NullBooleanField()
    group_uom = models.NullBooleanField()
    module_project = models.NullBooleanField()
    module_analytic_user_function = models.NullBooleanField()
    module_sale_journal = models.NullBooleanField()
    module_warning = models.NullBooleanField()
    module_sale_margin = models.NullBooleanField()
    module_delivery = models.NullBooleanField()
    group_invoice_deli_orders = models.NullBooleanField()
    default_picking_policy = models.NullBooleanField()
    task_work = models.NullBooleanField()
    group_mrp_properties = models.NullBooleanField()
    group_sale_delivery_address = models.NullBooleanField()
    group_multiple_shops = models.NullBooleanField()
    default_order_policy = models.CharField(max_length=-1, blank=True)
    module_project_mrp = models.NullBooleanField()
    module_project_timesheet = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'sale_config_settings'

class SaleMakeInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    grouped = models.NullBooleanField()
    invoice_date = models.DateField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_make_invoice'

class SaleOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    order_policy = models.CharField(max_length=-1)
    shop = models.ForeignKey('SaleShop')
    client_order_ref = models.CharField(max_length=64, blank=True)
    date_order = models.DateField()
    partner = models.ForeignKey(ResPartner)
    note = models.TextField(blank=True)
    fiscal_position = models.ForeignKey(AccountFiscalPosition, db_column='fiscal_position', blank=True, null=True)
    user = models.ForeignKey(ResUsers, blank=True, null=True)
    payment_term = models.ForeignKey(AccountPaymentTerm, db_column='payment_term', blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    amount_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    pricelist = models.ForeignKey(ProductPricelist)
    partner_invoice = models.ForeignKey(ResPartner)
    amount_untaxed = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_confirm = models.DateField(blank=True, null=True)
    amount_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    project = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    name = models.CharField(max_length=64)
    partner_shipping = models.ForeignKey(ResPartner)
    invoice_quantity = models.CharField(max_length=-1)
    picking_policy = models.CharField(max_length=-1)
    incoterm = models.IntegerField(blank=True, null=True)
    shipped = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'sale_order'

class SaleOrderInvoiceRel(models.Model):
    order = models.ForeignKey(SaleOrder)
    invoice = models.ForeignKey(AccountInvoice)
    class Meta:
        managed = False
        db_table = 'sale_order_invoice_rel'

class SaleOrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    product_uos_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    sequence = models.IntegerField(blank=True, null=True)
    order = models.ForeignKey(SaleOrder)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uom_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    discount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    product_uos = models.ForeignKey(ProductUom, db_column='product_uos', blank=True, null=True)
    name = models.TextField()
    company_id = models.IntegerField(blank=True, null=True)
    salesman_id = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    product = models.ForeignKey(ProductProduct, blank=True, null=True)
    order_partner_id = models.IntegerField(blank=True, null=True)
    th_weight = models.FloatField(blank=True, null=True)
    invoiced = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    address_allotment = models.ForeignKey(ResPartner, blank=True, null=True)
    procurement_id = models.IntegerField(blank=True, null=True)
    delay = models.FloatField()
    product_packaging = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_order_line'

class SaleOrderLineInvoiceRel(models.Model):
    order_line = models.ForeignKey(SaleOrderLine)
    invoice = models.ForeignKey(AccountInvoiceLine)
    class Meta:
        managed = False
        db_table = 'sale_order_line_invoice_rel'

class SaleOrderLineMakeInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_order_line_make_invoice'

class SaleOrderLinePropertyRel(models.Model):
    order = models.ForeignKey(SaleOrderLine)
    property = models.ForeignKey(MrpProperty)
    class Meta:
        managed = False
        db_table = 'sale_order_line_property_rel'

class SaleOrderTax(models.Model):
    order_line = models.ForeignKey(SaleOrderLine)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        managed = False
        db_table = 'sale_order_tax'

class SaleReceiptReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    currency_id = models.IntegerField(blank=True, null=True)
    journal_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=32, blank=True)
    pay_now = models.CharField(max_length=-1, blank=True)
    date_due = models.DateField(blank=True, null=True)
    account_id = models.IntegerField(blank=True, null=True)
    price_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_total_tax = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    delay_to_pay = models.FloatField(blank=True, null=True)
    due_delay = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_receipt_report'

class SaleReport(models.Model):
    id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    product_uom = models.IntegerField(blank=True, null=True)
    product_uom_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    price_total = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    nbr = models.BigIntegerField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    date_confirm = models.DateField(blank=True, null=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    shop_id = models.IntegerField(blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    delay = models.FloatField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    categ_id = models.IntegerField(blank=True, null=True)
    shipped = models.NullBooleanField()
    shipped_qty_1 = models.IntegerField(blank=True, null=True)
    pricelist_id = models.IntegerField(blank=True, null=True)
    analytic_account_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_report'

class SaleShop(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    pricelist = models.ForeignKey(ProductPricelist, blank=True, null=True)
    project = models.ForeignKey(AccountAnalyticAccount, blank=True, null=True)
    name = models.CharField(max_length=64)
    payment_default = models.ForeignKey(AccountPaymentTerm)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    warehouse_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'sale_shop'

class SaleUserRel(models.Model):
    user = models.ForeignKey(PosSaleUser)
    uid = models.ForeignKey(ResUsers, db_column='uid')
    class Meta:
        managed = False
        db_table = 'sale_user_rel'

class SaleUserRelToday(models.Model):
    user = models.ForeignKey(PosSalesUserToday)
    uid = models.ForeignKey(ResUsers, db_column='uid')
    class Meta:
        managed = False
        db_table = 'sale_user_rel_today'

class ShareWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    domain = models.CharField(max_length=256, blank=True)
    record_name = models.CharField(max_length=128, blank=True)
    invite = models.NullBooleanField()
    view_type = models.CharField(max_length=32)
    user_type = models.CharField(max_length=-1)
    email_2 = models.CharField(max_length=64, blank=True)
    email_3 = models.CharField(max_length=64, blank=True)
    embed_option_search = models.NullBooleanField()
    message = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    embed_option_title = models.NullBooleanField()
    email_1 = models.CharField(max_length=64, blank=True)
    new_users = models.TextField(blank=True)
    access_mode = models.CharField(max_length=-1)
    action = models.ForeignKey(IrActWindow)
    class Meta:
        managed = False
        db_table = 'share_wizard'

class ShareWizardResGroupRel(models.Model):
    share = models.ForeignKey(ShareWizard)
    group = models.ForeignKey(ResGroups)
    class Meta:
        managed = False
        db_table = 'share_wizard_res_group_rel'

class ShareWizardResUserRel(models.Model):
    share = models.ForeignKey(ShareWizard)
    user = models.ForeignKey(ResUsers)
    class Meta:
        managed = False
        db_table = 'share_wizard_res_user_rel'

class ShareWizardResultLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    password = models.CharField(max_length=64, blank=True)
    user = models.ForeignKey(ResUsers)
    newly_created = models.NullBooleanField()
    share_wizard = models.ForeignKey(ShareWizard)
    class Meta:
        managed = False
        db_table = 'share_wizard_result_line'

class StockChangeProductQty(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    location = models.ForeignKey('StockLocation')
    new_quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    product = models.ForeignKey(ProductProduct, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_change_product_qty'

class StockChangeStandardPrice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    stock_account_input = models.ForeignKey(AccountAccount, db_column='stock_account_input', blank=True, null=True)
    stock_journal = models.ForeignKey(AccountJournal, db_column='stock_journal')
    enable_stock_in_out_acc = models.NullBooleanField()
    new_price = models.DecimalField(max_digits=65535, decimal_places=65535)
    stock_account_output = models.ForeignKey(AccountAccount, db_column='stock_account_output', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_change_standard_price'

class StockConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    group_uom = models.NullBooleanField()
    decimal_precision = models.IntegerField(blank=True, null=True)
    group_stock_inventory_valuation = models.NullBooleanField()
    module_stock_invoice_directly = models.NullBooleanField()
    group_stock_multiple_locations = models.NullBooleanField()
    module_product_expiry = models.NullBooleanField()
    group_stock_packaging = models.NullBooleanField()
    module_stock_location = models.NullBooleanField()
    group_stock_tracking_lot = models.NullBooleanField()
    group_stock_production_lot = models.NullBooleanField()
    group_product_variant = models.NullBooleanField()
    group_uos = models.NullBooleanField()
    module_claim_from_delivery = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'stock_config_settings'

class StockFillInventory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    set_stock_zero = models.NullBooleanField()
    location = models.ForeignKey('StockLocation')
    recursive = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'stock_fill_inventory'

class StockIncoterms(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    code = models.CharField(max_length=3)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'stock_incoterms'

class StockInventory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=64)
    date_done = models.DateTimeField(blank=True, null=True)
    date = models.DateTimeField()
    company = models.ForeignKey(ResCompany)
    class Meta:
        managed = False
        db_table = 'stock_inventory'

class StockInventoryLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    prod_lot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    inventory = models.ForeignKey(StockInventory, blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location = models.ForeignKey('StockLocation')
    class Meta:
        managed = False
        db_table = 'stock_inventory_line'

class StockInventoryLineSplit(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom', blank=True, null=True)
    location = models.ForeignKey('StockLocation', blank=True, null=True)
    use_exist = models.NullBooleanField()
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_inventory_line_split'

class StockInventoryLineSplitLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    wizard_exist = models.ForeignKey(StockInventoryLineSplit, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    wizard = models.ForeignKey(StockInventoryLineSplit, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_inventory_line_split_lines'

class StockInventoryMerge(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_inventory_merge'

class StockInventoryMoveRel(models.Model):
    inventory = models.ForeignKey(StockInventory)
    move = models.ForeignKey('StockMove')
    class Meta:
        managed = False
        db_table = 'stock_inventory_move_rel'

class StockInvoiceOnshipping(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    group = models.NullBooleanField()
    invoice_date = models.DateField(blank=True, null=True)
    journal_id = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'stock_invoice_onshipping'

class StockJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    user = models.ForeignKey(ResUsers, blank=True, null=True)
    name = models.CharField(max_length=32)
    class Meta:
        managed = False
        db_table = 'stock_journal'

class StockLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    comment = models.TextField(blank=True)
    chained_delay = models.IntegerField(blank=True, null=True)
    chained_company = models.ForeignKey(ResCompany, blank=True, null=True)
    active = models.NullBooleanField()
    posz = models.IntegerField(blank=True, null=True)
    posx = models.IntegerField(blank=True, null=True)
    posy = models.IntegerField(blank=True, null=True)
    valuation_in_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    partner = models.ForeignKey(ResPartner, blank=True, null=True)
    icon = models.CharField(max_length=64, blank=True)
    valuation_out_account = models.ForeignKey(AccountAccount, blank=True, null=True)
    scrap_location = models.NullBooleanField()
    name = models.CharField(max_length=64)
    chained_location = models.ForeignKey('self', blank=True, null=True)
    chained_journal = models.ForeignKey(StockJournal, blank=True, null=True)
    chained_picking_type = models.CharField(max_length=-1, blank=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    chained_auto_packing = models.CharField(max_length=-1)
    complete_name = models.CharField(max_length=256, blank=True)
    usage = models.CharField(max_length=-1)
    location = models.ForeignKey('self', blank=True, null=True)
    chained_location_type = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'stock_location'

class StockLocationProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    from_date = models.DateTimeField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    to_date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_location_product'

class StockMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    product_uos_qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date_expected = models.DateTimeField()
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    date = models.DateTimeField()
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    move_dest = models.ForeignKey('self', blank=True, null=True)
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uos = models.ForeignKey(ProductUom, db_column='product_uos', blank=True, null=True)
    partner = models.ForeignKey(ResPartner, blank=True, null=True)
    name = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    product = models.ForeignKey(ProductProduct)
    auto_validate = models.NullBooleanField()
    price_currency = models.ForeignKey(ResCurrency, blank=True, null=True)
    location = models.ForeignKey(StockLocation)
    company = models.ForeignKey(ResCompany)
    picking = models.ForeignKey('StockPicking', blank=True, null=True)
    priority = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    location_dest = models.ForeignKey(StockLocation)
    tracking = models.ForeignKey('StockTracking', blank=True, null=True)
    product_packaging = models.ForeignKey(ProductPackaging, db_column='product_packaging', blank=True, null=True)
    sale_line = models.ForeignKey(SaleOrderLine, blank=True, null=True)
    purchase_line = models.ForeignKey(PurchaseOrderLine, blank=True, null=True)
    production = models.ForeignKey(MrpProduction, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_move'

class StockMoveConsume(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    location = models.ForeignKey(StockLocation)
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'stock_move_consume'

class StockMoveHistoryIds(models.Model):
    child = models.ForeignKey(StockMove)
    parent = models.ForeignKey(StockMove)
    class Meta:
        managed = False
        db_table = 'stock_move_history_ids'

class StockMoveScrap(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    location = models.ForeignKey(StockLocation)
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    product_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'stock_move_scrap'

class StockMoveSplit(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom', blank=True, null=True)
    location = models.ForeignKey(StockLocation, blank=True, null=True)
    use_exist = models.NullBooleanField()
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_move_split'

class StockMoveSplitLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    wizard_exist = models.ForeignKey(StockMoveSplit, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    wizard = models.ForeignKey(StockMoveSplit, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_move_split_lines'

class StockPartialMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    date = models.DateTimeField()
    picking = models.ForeignKey('StockPicking', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_partial_move'

class StockPartialMoveLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    update_cost = models.NullBooleanField()
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    wizard = models.ForeignKey(StockPartialMove, blank=True, null=True)
    currency = models.ForeignKey(ResCurrency, db_column='currency', blank=True, null=True)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    cost = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location_dest = models.ForeignKey(StockLocation)
    location = models.ForeignKey(StockLocation)
    move = models.ForeignKey(StockMove, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'stock_partial_move_line'

class StockPartialPicking(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    date = models.DateTimeField()
    picking = models.ForeignKey('StockPicking')
    class Meta:
        managed = False
        db_table = 'stock_partial_picking'

class StockPartialPickingLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    update_cost = models.NullBooleanField()
    product = models.ForeignKey(ProductProduct)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    wizard = models.ForeignKey(StockPartialPicking, blank=True, null=True)
    currency = models.ForeignKey(ResCurrency, db_column='currency', blank=True, null=True)
    prodlot = models.ForeignKey('StockProductionLot', blank=True, null=True)
    cost = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    location_dest = models.ForeignKey(StockLocation)
    location = models.ForeignKey(StockLocation)
    move = models.ForeignKey(StockMove, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    related = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'stock_partial_picking_line'

class StockPicking(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    origin = models.CharField(max_length=64, blank=True)
    date_done = models.DateTimeField(blank=True, null=True)
    min_date = models.DateTimeField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    partner = models.ForeignKey(ResPartner, blank=True, null=True)
    stock_journal = models.ForeignKey(StockJournal, blank=True, null=True)
    backorder = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    location = models.ForeignKey(StockLocation, blank=True, null=True)
    move_type = models.CharField(max_length=-1)
    company = models.ForeignKey(ResCompany)
    invoice_state = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    state = models.CharField(max_length=-1, blank=True)
    location_dest = models.ForeignKey(StockLocation, blank=True, null=True)
    max_date = models.DateTimeField(blank=True, null=True)
    auto_picking = models.NullBooleanField()
    type = models.CharField(max_length=-1)
    sale = models.ForeignKey(SaleOrder, blank=True, null=True)
    purchase = models.ForeignKey(PurchaseOrder, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_picking'

class StockPickingProdlotSelection(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    prefix = models.CharField(max_length=256, blank=True)
    create_prodlots = models.NullBooleanField()
    product = models.ForeignKey(ProductProduct)
    last_number = models.CharField(max_length=256)
    first_number = models.CharField(max_length=256)
    suffix = models.CharField(max_length=256, blank=True)
    class Meta:
        managed = False
        db_table = 'stock_picking_prodlot_selection'

class StockProductionLot(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    prefix = models.CharField(max_length=64, blank=True)
    product = models.ForeignKey(ProductProduct)
    date = models.DateTimeField()
    ref = models.CharField(max_length=256, blank=True)
    validate_type = models.CharField(max_length=-1, blank=True)
    was_sale = models.IntegerField(blank=True, null=True)
    validator = models.NullBooleanField()
    class Meta:
        managed = False
        db_table = 'stock_production_lot'

class StockProductionLotRevision(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    indice = models.CharField(max_length=16, blank=True)
    name = models.CharField(max_length=64)
    date = models.DateField(blank=True, null=True)
    lot = models.ForeignKey(StockProductionLot, blank=True, null=True)
    author = models.ForeignKey(ResUsers, blank=True, null=True)
    company_id = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'stock_production_lot_revision'

class StockReportProdlots(models.Model):
    id = models.IntegerField(blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    prodlot_id = models.IntegerField(blank=True, null=True)
    qty = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_report_prodlots'

class StockReportTracklots(models.Model):
    id = models.IntegerField(blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    tracking_id = models.IntegerField(blank=True, null=True)
    name = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_report_tracklots'

class StockReturnPicking(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    invoice_state = models.CharField(max_length=-1)
    class Meta:
        managed = False
        db_table = 'stock_return_picking'

class StockReturnPickingMemory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    wizard = models.ForeignKey(StockReturnPicking, blank=True, null=True)
    product = models.ForeignKey(ProductProduct)
    move = models.ForeignKey(StockMove, blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        managed = False
        db_table = 'stock_return_picking_memory'

class StockSplitInto(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'stock_split_into'

class StockTracking(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    active = models.NullBooleanField()
    serial = models.CharField(max_length=64, blank=True)
    date = models.DateTimeField()
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'stock_tracking'

class StockWarehouse(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    lot_input = models.ForeignKey(StockLocation)
    lot_output = models.ForeignKey(StockLocation)
    name = models.CharField(max_length=128)
    lot_stock = models.ForeignKey(StockLocation)
    partner = models.ForeignKey(ResPartner, blank=True, null=True)
    company = models.ForeignKey(ResCompany)
    class Meta:
        managed = False
        db_table = 'stock_warehouse'

class StockWarehouseOrderpoint(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    product_max_qty = models.FloatField()
    product_min_qty = models.FloatField()
    qty_multiple = models.IntegerField()
    procurement = models.ForeignKey(ProcurementOrder, blank=True, null=True)
    name = models.CharField(max_length=32)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    company = models.ForeignKey(ResCompany)
    warehouse = models.ForeignKey(StockWarehouse)
    logic = models.CharField(max_length=-1)
    active = models.NullBooleanField()
    location = models.ForeignKey(StockLocation)
    product = models.ForeignKey(ProductProduct)
    class Meta:
        managed = False
        db_table = 'stock_warehouse_orderpoint'

class TempRange(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'temp_range'

class ValidateAccountMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    period = models.ForeignKey(AccountPeriod)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        managed = False
        db_table = 'validate_account_move'

class ValidateAccountMoveLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'validate_account_move_lines'

class VatPeriodRel(models.Model):
    vat = models.ForeignKey(Reportes)
    period = models.ForeignKey(AccountPeriod)
    class Meta:
        managed = False
        db_table = 'vat_period_rel'

class WizardIrModelMenuCreate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    menu = models.ForeignKey(IrUiMenu)
    name = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'wizard_ir_model_menu_create'

class WizardMultiChartsAccounts(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    only_one_chart_template = models.NullBooleanField()
    purchase_tax_rate = models.FloatField(blank=True, null=True)
    complete_tax_set = models.NullBooleanField()
    code_digits = models.IntegerField()
    chart_template = models.ForeignKey(AccountChartTemplate)
    sale_tax = models.ForeignKey(AccountTaxTemplate, db_column='sale_tax', blank=True, null=True)
    company = models.ForeignKey(ResCompany)
    purchase_tax = models.ForeignKey(AccountTaxTemplate, db_column='purchase_tax', blank=True, null=True)
    currency = models.ForeignKey(ResCurrency, blank=True, null=True)
    sale_tax_rate = models.FloatField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'wizard_multi_charts_accounts'

class Wkf(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    osv = models.CharField(max_length=64)
    on_create = models.NullBooleanField()
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'wkf'

class WkfActivity(models.Model):
    id = models.IntegerField(primary_key=True)
    wkf = models.ForeignKey(Wkf)
    subflow = models.ForeignKey(Wkf, blank=True, null=True)
    split_mode = models.CharField(max_length=3)
    join_mode = models.CharField(max_length=3)
    kind = models.CharField(max_length=16)
    name = models.CharField(max_length=64)
    signal_send = models.CharField(max_length=32, blank=True)
    flow_start = models.NullBooleanField()
    flow_stop = models.NullBooleanField()
    action = models.TextField(blank=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    action_0 = models.ForeignKey(IrActServer, db_column='action_id', blank=True, null=True) # Field renamed because of name conflict.
    class Meta:
        managed = False
        db_table = 'wkf_activity'

class WkfInstance(models.Model):
    id = models.IntegerField(primary_key=True)
    wkf = models.ForeignKey(Wkf, blank=True, null=True)
    uid = models.IntegerField(blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    res_type = models.CharField(max_length=64, blank=True)
    state = models.CharField(max_length=32, blank=True)
    class Meta:
        managed = False
        db_table = 'wkf_instance'

class WkfLogs(models.Model):
    id = models.IntegerField(primary_key=True)
    res_type = models.CharField(max_length=128)
    res_id = models.IntegerField()
    uid = models.ForeignKey(ResUsers, db_column='uid', blank=True, null=True)
    act = models.ForeignKey(WkfActivity, blank=True, null=True)
    time = models.TimeField()
    info = models.CharField(max_length=128, blank=True)
    class Meta:
        managed = False
        db_table = 'wkf_logs'

class WkfTransition(models.Model):
    id = models.IntegerField(primary_key=True)
    act_from = models.ForeignKey(WkfActivity, db_column='act_from')
    act_to = models.ForeignKey(WkfActivity, db_column='act_to')
    condition = models.CharField(max_length=128)
    trigger_type = models.CharField(max_length=128, blank=True)
    trigger_expr_id = models.CharField(max_length=128, blank=True)
    signal = models.CharField(max_length=64, blank=True)
    group = models.ForeignKey(ResGroups, blank=True, null=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    trigger_model = models.CharField(max_length=128, blank=True)
    class Meta:
        managed = False
        db_table = 'wkf_transition'

class WkfTriggers(models.Model):
    id = models.IntegerField(primary_key=True)
    instance = models.ForeignKey(WkfInstance, blank=True, null=True)
    workitem = models.ForeignKey('WkfWorkitem')
    model = models.CharField(max_length=128, blank=True)
    res_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'wkf_triggers'

class WkfWitmTrans(models.Model):
    trans = models.ForeignKey(WkfTransition)
    inst = models.ForeignKey(WkfInstance)
    class Meta:
        managed = False
        db_table = 'wkf_witm_trans'

class WkfWorkitem(models.Model):
    id = models.IntegerField(primary_key=True)
    act = models.ForeignKey(WkfActivity)
    inst = models.ForeignKey(WkfInstance)
    subflow = models.ForeignKey(WkfInstance, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'wkf_workitem'

